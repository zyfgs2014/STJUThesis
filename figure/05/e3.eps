%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 3.pdf
%%Creator: Adobe Acrobat 9.1.2
%%For: azyf
%%CreationDate: 2016-06-28, 22:27:09
%%BoundingBox: 0 0 432 288
%%HiResBoundingBox: 0 0 432 288
%%CropBox: 0 0 432 288
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 567 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-06-28T22:17:27+08:00"
   xmp:CreatorTool="matplotlib 1.5.1, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
432 288 li
432 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 288 mo
432 288 li
432 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 85.592 mo
91.2 67.736 li
128.4 38.224 li
165.6 96.504 li
202.8 127.752 li
240 132.216 li
277.2 169.416 li
314.4 187.768 li
351.6 219.76 li
388.8 231.664 li
/1 
[/DeviceCMYK] /CSA add_res
3.0518e-5 1 1 3.0518e-5 cmyk
@
grestore
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
54 121.8 mo
91.2 121.8 li
128.4 121.8 li
165.6 121.8 li
202.8 121.8 li
240 121.8 li
277.2 121.8 li
314.4 121.8 li
351.6 121.8 li
388.8 121.8 li
.948119 .783108 3.0518e-5 3.0518e-5 cmyk
@
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
54 28.8 mo
388.8 28.8 li
1 /0 /CSD get_res sepcs
1 sep
@
388.8 252 mo
388.8 28.8 li
@
54 252 mo
388.8 252 li
@
54 252 mo
54 28.8 li
@
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
54 252 mo
54 28.8 li
@
grestore
54 252 mo
54 248 li
f
.5 lw
0 lc
1 lj
54 252 mo
54 248 li
@
54 28.8 mo
54 32.8 li
f
54 28.8 mo
54 32.8 li
@
51.9003 256.304 mo
55.7703 256.304 li
55.7703 257.134 li
52.8003 257.134 li
52.8003 258.924 li
52.9403 258.874 53.0903 258.834 53.2303 258.814 cv
53.3703 258.794 53.5203 258.774 53.6603 258.774 cv
54.4703 258.774 55.1103 259.004 55.5903 259.444 cv
56.0703 259.894 56.3103 260.494 56.3103 261.254 cv
56.3103 262.044 56.0603 262.654 55.5703 263.084 cv
55.0803 263.514 54.3903 263.724 53.5103 263.724 cv
53.2003 263.724 52.8903 263.694 52.5703 263.654 cv
52.2503 263.604 51.9303 263.534 51.5903 263.424 cv
51.5903 262.434 li
51.8803 262.594 52.1803 262.714 52.5003 262.794 cv
52.8103 262.874 53.1403 262.904 53.4903 262.904 cv
54.0503 262.904 54.5003 262.764 54.8303 262.464 cv
55.1503 262.164 55.3203 261.764 55.3203 261.254 cv
55.3203 260.754 55.1503 260.354 54.8303 260.054 cv
54.5003 259.754 54.0503 259.604 53.4903 259.604 cv
53.2303 259.604 52.9603 259.634 52.7003 259.694 cv
52.4403 259.754 52.1703 259.844 51.9003 259.964 cv
51.9003 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
91.2 252 mo
91.2 28.8 li
@
grestore
91.2 252 mo
91.2 248 li
f
91.2 252 mo
91.2 248 li
@
91.2 28.8 mo
91.2 32.8 li
f
91.2 28.8 mo
91.2 32.8 li
@
86.0806 262.764 mo
87.6906 262.764 li
87.6906 257.204 li
85.9406 257.554 li
85.9406 256.654 li
87.6806 256.304 li
88.6706 256.304 li
88.6706 262.764 li
90.2806 262.764 li
90.2806 263.594 li
86.0806 263.594 li
86.0806 262.764 li
f
94.3806 256.954 mo
93.8706 256.954 93.4906 257.204 93.2306 257.704 cv
92.9706 258.204 92.8506 258.954 92.8506 259.954 cv
92.8506 260.954 92.9706 261.704 93.2306 262.204 cv
93.4906 262.704 93.8706 262.954 94.3806 262.954 cv
94.8906 262.954 95.2706 262.704 95.5306 262.204 cv
95.7806 261.704 95.9106 260.954 95.9106 259.954 cv
95.9106 258.954 95.7806 258.204 95.5306 257.704 cv
95.2706 257.204 94.8906 256.954 94.3806 256.954 cv
94.3806 256.174 mo
95.1906 256.174 95.8106 256.504 96.2506 257.144 cv
96.6806 257.794 96.9006 258.734 96.9006 259.954 cv
96.9006 261.184 96.6806 262.124 96.2506 262.764 cv
95.8106 263.404 95.1906 263.724 94.3806 263.724 cv
93.5606 263.724 92.9306 263.404 92.5006 262.764 cv
92.0706 262.124 91.8606 261.184 91.8606 259.954 cv
91.8606 258.734 92.0706 257.794 92.5006 257.144 cv
92.9306 256.504 93.5606 256.174 94.3806 256.174 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
128.4 252 mo
128.4 28.8 li
@
grestore
128.4 252 mo
128.4 248 li
f
128.4 252 mo
128.4 248 li
@
128.4 28.8 mo
128.4 32.8 li
f
128.4 28.8 mo
128.4 32.8 li
@
123.281 262.764 mo
124.891 262.764 li
124.891 257.204 li
123.141 257.554 li
123.141 256.654 li
124.881 256.304 li
125.871 256.304 li
125.871 262.764 li
127.481 262.764 li
127.481 263.594 li
123.281 263.594 li
123.281 262.764 li
f
129.481 256.304 mo
133.351 256.304 li
133.351 257.134 li
130.381 257.134 li
130.381 258.924 li
130.521 258.874 130.671 258.834 130.811 258.814 cv
130.951 258.794 131.101 258.774 131.241 258.774 cv
132.051 258.774 132.691 259.004 133.171 259.444 cv
133.651 259.894 133.891 260.494 133.891 261.254 cv
133.891 262.044 133.641 262.654 133.151 263.084 cv
132.661 263.514 131.971 263.724 131.091 263.724 cv
130.781 263.724 130.471 263.694 130.151 263.654 cv
129.831 263.604 129.511 263.534 129.171 263.424 cv
129.171 262.434 li
129.461 262.594 129.761 262.714 130.081 262.794 cv
130.391 262.874 130.721 262.904 131.071 262.904 cv
131.631 262.904 132.081 262.764 132.411 262.464 cv
132.731 262.164 132.901 261.764 132.901 261.254 cv
132.901 260.754 132.731 260.354 132.411 260.054 cv
132.081 259.754 131.631 259.604 131.071 259.604 cv
130.811 259.604 130.541 259.634 130.281 259.694 cv
130.021 259.754 129.751 259.844 129.481 259.964 cv
129.481 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
165.6 252 mo
165.6 28.8 li
@
grestore
165.6 252 mo
165.6 248 li
f
165.6 252 mo
165.6 248 li
@
165.6 28.8 mo
165.6 32.8 li
f
165.6 28.8 mo
165.6 32.8 li
@
161.161 262.764 mo
164.601 262.764 li
164.601 263.594 li
159.971 263.594 li
159.971 262.764 li
160.341 262.384 160.851 261.864 161.501 261.204 cv
162.141 260.554 162.551 260.134 162.721 259.944 cv
163.041 259.594 163.261 259.294 163.381 259.044 cv
163.501 258.804 163.571 258.554 163.571 258.314 cv
163.571 257.934 163.431 257.614 163.161 257.374 cv
162.891 257.134 162.541 257.004 162.101 257.004 cv
161.791 257.004 161.461 257.064 161.121 257.164 cv
160.781 257.274 160.411 257.434 160.021 257.654 cv
160.021 256.654 li
160.421 256.494 160.791 256.374 161.131 256.294 cv
161.471 256.214 161.791 256.174 162.081 256.174 cv
162.831 256.174 163.431 256.364 163.881 256.744 cv
164.331 257.124 164.561 257.624 164.561 258.254 cv
164.561 258.554 164.501 258.844 164.391 259.104 cv
164.281 259.374 164.081 259.694 163.781 260.054 cv
163.701 260.154 163.441 260.424 163.001 260.874 cv
162.561 261.324 161.951 261.954 161.161 262.764 cv
f
168.781 256.954 mo
168.271 256.954 167.891 257.204 167.631 257.704 cv
167.371 258.204 167.251 258.954 167.251 259.954 cv
167.251 260.954 167.371 261.704 167.631 262.204 cv
167.891 262.704 168.271 262.954 168.781 262.954 cv
169.291 262.954 169.671 262.704 169.931 262.204 cv
170.181 261.704 170.311 260.954 170.311 259.954 cv
170.311 258.954 170.181 258.204 169.931 257.704 cv
169.671 257.204 169.291 256.954 168.781 256.954 cv
168.781 256.174 mo
169.591 256.174 170.211 256.504 170.651 257.144 cv
171.081 257.794 171.301 258.734 171.301 259.954 cv
171.301 261.184 171.081 262.124 170.651 262.764 cv
170.211 263.404 169.591 263.724 168.781 263.724 cv
167.961 263.724 167.331 263.404 166.901 262.764 cv
166.471 262.124 166.261 261.184 166.261 259.954 cv
166.261 258.734 166.471 257.794 166.901 257.144 cv
167.331 256.504 167.961 256.174 168.781 256.174 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
202.8 252 mo
202.8 28.8 li
@
grestore
202.8 252 mo
202.8 248 li
f
202.8 252 mo
202.8 248 li
@
202.8 28.8 mo
202.8 32.8 li
f
202.8 28.8 mo
202.8 32.8 li
@
198.361 262.764 mo
201.801 262.764 li
201.801 263.594 li
197.171 263.594 li
197.171 262.764 li
197.541 262.384 198.051 261.864 198.701 261.204 cv
199.341 260.554 199.751 260.134 199.921 259.944 cv
200.241 259.594 200.461 259.294 200.581 259.044 cv
200.701 258.804 200.771 258.554 200.771 258.314 cv
200.771 257.934 200.631 257.614 200.361 257.374 cv
200.091 257.134 199.741 257.004 199.301 257.004 cv
198.991 257.004 198.661 257.064 198.321 257.164 cv
197.981 257.274 197.611 257.434 197.221 257.654 cv
197.221 256.654 li
197.621 256.494 197.991 256.374 198.331 256.294 cv
198.671 256.214 198.991 256.174 199.281 256.174 cv
200.031 256.174 200.631 256.364 201.081 256.744 cv
201.531 257.124 201.761 257.624 201.761 258.254 cv
201.761 258.554 201.701 258.844 201.591 259.104 cv
201.481 259.374 201.281 259.694 200.981 260.054 cv
200.901 260.154 200.641 260.424 200.201 260.874 cv
199.761 261.324 199.151 261.954 198.361 262.764 cv
f
203.881 256.304 mo
207.751 256.304 li
207.751 257.134 li
204.781 257.134 li
204.781 258.924 li
204.921 258.874 205.071 258.834 205.211 258.814 cv
205.351 258.794 205.501 258.774 205.641 258.774 cv
206.451 258.774 207.091 259.004 207.571 259.444 cv
208.051 259.894 208.291 260.494 208.291 261.254 cv
208.291 262.044 208.041 262.654 207.551 263.084 cv
207.061 263.514 206.371 263.724 205.491 263.724 cv
205.181 263.724 204.871 263.694 204.551 263.654 cv
204.231 263.604 203.911 263.534 203.571 263.424 cv
203.571 262.434 li
203.861 262.594 204.161 262.714 204.481 262.794 cv
204.791 262.874 205.121 262.904 205.471 262.904 cv
206.031 262.904 206.481 262.764 206.811 262.464 cv
207.131 262.164 207.301 261.764 207.301 261.254 cv
207.301 260.754 207.131 260.354 206.811 260.054 cv
206.481 259.754 206.031 259.604 205.471 259.604 cv
205.211 259.604 204.941 259.634 204.681 259.694 cv
204.421 259.754 204.151 259.844 203.881 259.964 cv
203.881 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
240 252 mo
240 28.8 li
@
grestore
240 252 mo
240 248 li
f
240 252 mo
240 248 li
@
240 28.8 mo
240 32.8 li
f
240 28.8 mo
240 32.8 li
@
237.701 259.664 mo
238.171 259.764 238.541 259.974 238.801 260.294 cv
239.061 260.614 239.201 261.014 239.201 261.474 cv
239.201 262.194 238.951 262.754 238.461 263.144 cv
237.961 263.534 237.261 263.724 236.351 263.724 cv
236.041 263.724 235.721 263.694 235.401 263.634 cv
235.081 263.584 234.741 263.494 234.401 263.374 cv
234.401 262.424 li
234.671 262.584 234.971 262.704 235.301 262.784 cv
235.621 262.864 235.961 262.904 236.321 262.904 cv
236.941 262.904 237.411 262.784 237.731 262.544 cv
238.051 262.304 238.221 261.944 238.221 261.474 cv
238.221 261.054 238.071 260.714 237.771 260.474 cv
237.471 260.234 237.051 260.104 236.511 260.104 cv
235.661 260.104 li
235.661 259.294 li
236.551 259.294 li
237.031 259.294 237.401 259.204 237.661 259.004 cv
237.921 258.814 238.051 258.534 238.051 258.164 cv
238.051 257.794 237.911 257.504 237.651 257.304 cv
237.381 257.104 237.001 257.004 236.511 257.004 cv
236.241 257.004 235.951 257.034 235.641 257.094 cv
235.331 257.154 234.991 257.244 234.621 257.364 cv
234.621 256.484 li
234.991 256.384 235.341 256.304 235.671 256.254 cv
235.991 256.204 236.301 256.174 236.601 256.174 cv
237.341 256.174 237.931 256.344 238.371 256.684 cv
238.811 257.024 239.031 257.484 239.031 258.064 cv
239.031 258.464 238.911 258.804 238.681 259.084 cv
238.451 259.364 238.121 259.564 237.701 259.664 cv
f
243.181 256.954 mo
242.671 256.954 242.291 257.204 242.031 257.704 cv
241.771 258.204 241.651 258.954 241.651 259.954 cv
241.651 260.954 241.771 261.704 242.031 262.204 cv
242.291 262.704 242.671 262.954 243.181 262.954 cv
243.691 262.954 244.071 262.704 244.331 262.204 cv
244.581 261.704 244.711 260.954 244.711 259.954 cv
244.711 258.954 244.581 258.204 244.331 257.704 cv
244.071 257.204 243.691 256.954 243.181 256.954 cv
243.181 256.174 mo
243.991 256.174 244.611 256.504 245.051 257.144 cv
245.481 257.794 245.701 258.734 245.701 259.954 cv
245.701 261.184 245.481 262.124 245.051 262.764 cv
244.611 263.404 243.991 263.724 243.181 263.724 cv
242.361 263.724 241.731 263.404 241.301 262.764 cv
240.871 262.124 240.661 261.184 240.661 259.954 cv
240.661 258.734 240.871 257.794 241.301 257.144 cv
241.731 256.504 242.361 256.174 243.181 256.174 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
277.2 252 mo
277.2 28.8 li
@
grestore
277.2 252 mo
277.2 248 li
f
277.2 252 mo
277.2 248 li
@
277.2 28.8 mo
277.2 32.8 li
f
277.2 28.8 mo
277.2 32.8 li
@
274.901 259.664 mo
275.371 259.764 275.741 259.974 276.001 260.294 cv
276.261 260.614 276.401 261.014 276.401 261.474 cv
276.401 262.194 276.151 262.754 275.661 263.144 cv
275.161 263.534 274.461 263.724 273.551 263.724 cv
273.241 263.724 272.921 263.694 272.601 263.634 cv
272.281 263.584 271.941 263.494 271.601 263.374 cv
271.601 262.424 li
271.871 262.584 272.171 262.704 272.501 262.784 cv
272.821 262.864 273.161 262.904 273.521 262.904 cv
274.141 262.904 274.611 262.784 274.931 262.544 cv
275.251 262.304 275.421 261.944 275.421 261.474 cv
275.421 261.054 275.271 260.714 274.971 260.474 cv
274.671 260.234 274.251 260.104 273.711 260.104 cv
272.861 260.104 li
272.861 259.294 li
273.751 259.294 li
274.231 259.294 274.601 259.204 274.861 259.004 cv
275.121 258.814 275.251 258.534 275.251 258.164 cv
275.251 257.794 275.111 257.504 274.851 257.304 cv
274.581 257.104 274.201 257.004 273.711 257.004 cv
273.441 257.004 273.151 257.034 272.841 257.094 cv
272.531 257.154 272.191 257.244 271.821 257.364 cv
271.821 256.484 li
272.191 256.384 272.541 256.304 272.871 256.254 cv
273.191 256.204 273.501 256.174 273.801 256.174 cv
274.541 256.174 275.131 256.344 275.571 256.684 cv
276.011 257.024 276.231 257.484 276.231 258.064 cv
276.231 258.464 276.111 258.804 275.881 259.084 cv
275.651 259.364 275.321 259.564 274.901 259.664 cv
f
278.281 256.304 mo
282.151 256.304 li
282.151 257.134 li
279.181 257.134 li
279.181 258.924 li
279.321 258.874 279.471 258.834 279.611 258.814 cv
279.751 258.794 279.901 258.774 280.041 258.774 cv
280.851 258.774 281.491 259.004 281.971 259.444 cv
282.451 259.894 282.691 260.494 282.691 261.254 cv
282.691 262.044 282.441 262.654 281.951 263.084 cv
281.461 263.514 280.771 263.724 279.891 263.724 cv
279.581 263.724 279.271 263.694 278.951 263.654 cv
278.631 263.604 278.311 263.534 277.971 263.424 cv
277.971 262.434 li
278.261 262.594 278.561 262.714 278.881 262.794 cv
279.191 262.874 279.521 262.904 279.871 262.904 cv
280.431 262.904 280.881 262.764 281.211 262.464 cv
281.531 262.164 281.701 261.764 281.701 261.254 cv
281.701 260.754 281.531 260.354 281.211 260.054 cv
280.881 259.754 280.431 259.604 279.871 259.604 cv
279.611 259.604 279.341 259.634 279.081 259.694 cv
278.821 259.754 278.551 259.844 278.281 259.964 cv
278.281 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
314.4 252 mo
314.4 28.8 li
@
grestore
314.4 252 mo
314.4 248 li
f
314.4 252 mo
314.4 248 li
@
314.4 28.8 mo
314.4 32.8 li
f
314.4 28.8 mo
314.4 32.8 li
@
311.821 257.164 mo
309.331 261.054 li
311.821 261.054 li
311.821 257.164 li
311.561 256.304 mo
312.801 256.304 li
312.801 261.054 li
313.841 261.054 li
313.841 261.874 li
312.801 261.874 li
312.801 263.594 li
311.821 263.594 li
311.821 261.874 li
308.531 261.874 li
308.531 260.924 li
311.561 256.304 li
f
317.581 256.954 mo
317.071 256.954 316.691 257.204 316.431 257.704 cv
316.171 258.204 316.051 258.954 316.051 259.954 cv
316.051 260.954 316.171 261.704 316.431 262.204 cv
316.691 262.704 317.071 262.954 317.581 262.954 cv
318.091 262.954 318.471 262.704 318.731 262.204 cv
318.981 261.704 319.111 260.954 319.111 259.954 cv
319.111 258.954 318.981 258.204 318.731 257.704 cv
318.471 257.204 318.091 256.954 317.581 256.954 cv
317.581 256.174 mo
318.391 256.174 319.011 256.504 319.451 257.144 cv
319.881 257.794 320.101 258.734 320.101 259.954 cv
320.101 261.184 319.881 262.124 319.451 262.764 cv
319.011 263.404 318.391 263.724 317.581 263.724 cv
316.761 263.724 316.131 263.404 315.701 262.764 cv
315.271 262.124 315.061 261.184 315.061 259.954 cv
315.061 258.734 315.271 257.794 315.701 257.144 cv
316.131 256.504 316.761 256.174 317.581 256.174 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
351.6 252 mo
351.6 28.8 li
@
grestore
351.6 252 mo
351.6 248 li
f
351.6 252 mo
351.6 248 li
@
351.6 28.8 mo
351.6 32.8 li
f
351.6 28.8 mo
351.6 32.8 li
@
349.021 257.164 mo
346.531 261.054 li
349.021 261.054 li
349.021 257.164 li
348.761 256.304 mo
350.001 256.304 li
350.001 261.054 li
351.041 261.054 li
351.041 261.874 li
350.001 261.874 li
350.001 263.594 li
349.021 263.594 li
349.021 261.874 li
345.731 261.874 li
345.731 260.924 li
348.761 256.304 li
f
352.681 256.304 mo
356.551 256.304 li
356.551 257.134 li
353.581 257.134 li
353.581 258.924 li
353.721 258.874 353.871 258.834 354.011 258.814 cv
354.151 258.794 354.301 258.774 354.441 258.774 cv
355.251 258.774 355.891 259.004 356.371 259.444 cv
356.851 259.894 357.091 260.494 357.091 261.254 cv
357.091 262.044 356.841 262.654 356.351 263.084 cv
355.861 263.514 355.171 263.724 354.291 263.724 cv
353.981 263.724 353.671 263.694 353.351 263.654 cv
353.031 263.604 352.711 263.534 352.371 263.424 cv
352.371 262.434 li
352.661 262.594 352.961 262.714 353.281 262.794 cv
353.591 262.874 353.921 262.904 354.271 262.904 cv
354.831 262.904 355.281 262.764 355.611 262.464 cv
355.931 262.164 356.101 261.764 356.101 261.254 cv
356.101 260.754 355.931 260.354 355.611 260.054 cv
355.281 259.754 354.831 259.604 354.271 259.604 cv
354.011 259.604 353.741 259.634 353.481 259.694 cv
353.221 259.754 352.951 259.844 352.681 259.964 cv
352.681 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
388.8 252 mo
388.8 28.8 li
@
grestore
388.8 252 mo
388.8 248 li
f
388.8 252 mo
388.8 248 li
@
388.8 28.8 mo
388.8 32.8 li
f
388.8 28.8 mo
388.8 32.8 li
@
383.521 256.304 mo
387.391 256.304 li
387.391 257.134 li
384.421 257.134 li
384.421 258.924 li
384.561 258.874 384.711 258.834 384.851 258.814 cv
384.991 258.794 385.141 258.774 385.281 258.774 cv
386.091 258.774 386.731 259.004 387.211 259.444 cv
387.691 259.894 387.931 260.494 387.931 261.254 cv
387.931 262.044 387.681 262.654 387.191 263.084 cv
386.701 263.514 386.011 263.724 385.131 263.724 cv
384.821 263.724 384.511 263.694 384.191 263.654 cv
383.871 263.604 383.551 263.534 383.211 263.424 cv
383.211 262.434 li
383.501 262.594 383.801 262.714 384.121 262.794 cv
384.431 262.874 384.761 262.904 385.111 262.904 cv
385.671 262.904 386.121 262.764 386.451 262.464 cv
386.771 262.164 386.941 261.764 386.941 261.254 cv
386.941 260.754 386.771 260.354 386.451 260.054 cv
386.121 259.754 385.671 259.604 385.111 259.604 cv
384.851 259.604 384.581 259.634 384.321 259.694 cv
384.061 259.754 383.791 259.844 383.521 259.964 cv
383.521 256.304 li
f
391.981 256.954 mo
391.471 256.954 391.091 257.204 390.831 257.704 cv
390.571 258.204 390.451 258.954 390.451 259.954 cv
390.451 260.954 390.571 261.704 390.831 262.204 cv
391.091 262.704 391.471 262.954 391.981 262.954 cv
392.491 262.954 392.871 262.704 393.131 262.204 cv
393.381 261.704 393.511 260.954 393.511 259.954 cv
393.511 258.954 393.381 258.204 393.131 257.704 cv
392.871 257.204 392.491 256.954 391.981 256.954 cv
391.981 256.174 mo
392.791 256.174 393.411 256.504 393.851 257.144 cv
394.281 257.794 394.501 258.734 394.501 259.954 cv
394.501 261.184 394.281 262.124 393.851 262.764 cv
393.411 263.404 392.791 263.724 391.981 263.724 cv
391.161 263.724 390.531 263.404 390.101 262.764 cv
389.671 262.124 389.461 261.184 389.461 259.954 cv
389.461 258.734 389.671 257.794 390.101 257.144 cv
390.531 256.504 391.161 256.174 391.981 256.174 cv
f
182.033 273.866 mo
180.613 273.866 li
180.203 275.496 li
181.633 275.496 li
182.033 273.866 li
181.303 271.086 mo
180.793 273.116 li
182.223 273.116 li
182.733 271.086 li
183.513 271.086 li
183.013 273.116 li
184.533 273.116 li
184.533 273.866 li
182.823 273.866 li
182.423 275.496 li
183.973 275.496 li
183.973 276.246 li
182.233 276.246 li
181.723 278.266 li
180.943 278.266 li
181.443 276.246 li
180.013 276.246 li
179.513 278.266 li
178.723 278.266 li
179.233 276.246 li
177.693 276.246 li
177.693 275.496 li
179.413 275.496 li
179.823 273.866 li
178.253 273.866 li
178.253 273.116 li
180.013 273.116 li
180.513 271.086 li
181.303 271.086 li
f
191.543 273.426 mo
191.063 273.426 190.683 273.616 190.403 273.996 cv
190.123 274.376 189.983 274.886 189.983 275.536 cv
189.983 276.196 190.113 276.706 190.393 277.086 cv
190.673 277.466 191.053 277.646 191.543 277.646 cv
192.023 277.646 192.403 277.466 192.683 277.086 cv
192.963 276.706 193.103 276.196 193.103 275.536 cv
193.103 274.896 192.963 274.376 192.683 273.996 cv
192.403 273.616 192.023 273.426 191.543 273.426 cv
191.543 272.666 mo
192.323 272.666 192.933 272.926 193.383 273.426 cv
193.823 273.936 194.053 274.636 194.053 275.536 cv
194.053 276.436 193.823 277.136 193.383 277.636 cv
192.933 278.146 192.323 278.396 191.543 278.396 cv
190.753 278.396 190.133 278.146 189.693 277.636 cv
189.253 277.136 189.033 276.436 189.033 275.536 cv
189.033 274.636 189.253 273.936 189.693 273.426 cv
190.133 272.926 190.753 272.666 191.543 272.666 cv
f
198.313 270.666 mo
198.313 271.416 li
197.453 271.416 li
197.133 271.416 196.903 271.486 196.783 271.616 cv
196.653 271.746 196.593 271.976 196.593 272.316 cv
196.593 272.796 li
198.073 272.796 li
198.073 273.496 li
196.593 273.496 li
196.593 278.266 li
195.693 278.266 li
195.693 273.496 li
194.833 273.496 li
194.833 272.796 li
195.693 272.796 li
195.693 272.416 li
195.693 271.816 195.833 271.366 196.113 271.086 cv
196.393 270.806 196.843 270.666 197.463 270.666 cv
198.313 270.666 li
f
201.283 270.976 mo
207.443 270.976 li
207.443 271.806 li
204.853 271.806 li
204.853 278.266 li
203.863 278.266 li
203.863 271.806 li
201.283 271.806 li
201.283 270.976 li
f
210.473 273.426 mo
209.993 273.426 209.613 273.616 209.333 273.996 cv
209.053 274.376 208.913 274.886 208.913 275.536 cv
208.913 276.196 209.043 276.706 209.323 277.086 cv
209.603 277.466 209.983 277.646 210.473 277.646 cv
210.953 277.646 211.333 277.466 211.613 277.086 cv
211.893 276.706 212.033 276.196 212.033 275.536 cv
212.033 274.896 211.893 274.376 211.613 273.996 cv
211.333 273.616 210.953 273.426 210.473 273.426 cv
210.473 272.666 mo
211.253 272.666 211.863 272.926 212.313 273.426 cv
212.753 273.936 212.983 274.636 212.983 275.536 cv
212.983 276.436 212.753 277.136 212.313 277.636 cv
211.863 278.146 211.253 278.396 210.473 278.396 cv
209.683 278.396 209.063 278.146 208.623 277.636 cv
208.183 277.136 207.963 276.436 207.963 275.536 cv
207.963 274.636 208.183 273.936 208.623 273.426 cv
209.063 272.926 209.683 272.666 210.473 272.666 cv
f
215.343 277.446 mo
215.343 280.336 li
214.443 280.336 li
214.443 272.796 li
215.343 272.796 li
215.343 273.626 li
215.523 273.306 215.763 273.066 216.053 272.906 cv
216.343 272.746 216.693 272.666 217.093 272.666 cv
217.753 272.666 218.293 272.936 218.713 273.456 cv
219.123 273.986 219.333 274.676 219.333 275.536 cv
219.333 276.396 219.123 277.096 218.713 277.616 cv
218.293 278.136 217.753 278.396 217.093 278.396 cv
216.693 278.396 216.343 278.316 216.053 278.166 cv
215.763 278.016 215.523 277.776 215.343 277.446 cv
218.403 275.536 mo
218.403 274.876 218.263 274.366 217.993 273.986 cv
217.713 273.606 217.343 273.416 216.873 273.416 cv
216.393 273.416 216.023 273.606 215.753 273.986 cv
215.473 274.366 215.343 274.876 215.343 275.536 cv
215.343 276.196 215.473 276.716 215.753 277.096 cv
216.023 277.476 216.393 277.656 216.873 277.656 cv
217.343 277.656 217.713 277.476 217.993 277.096 cv
218.263 276.716 218.403 276.196 218.403 275.536 cv
f
220.823 272.796 mo
221.723 272.796 li
221.723 278.266 li
220.823 278.266 li
220.823 272.796 li
220.823 270.666 mo
221.723 270.666 li
221.723 271.806 li
220.823 271.806 li
220.823 270.666 li
f
227.543 273.006 mo
227.543 273.846 li
227.283 273.706 227.033 273.606 226.773 273.536 cv
226.513 273.466 226.263 273.426 226.003 273.426 cv
225.423 273.426 224.963 273.616 224.643 273.986 cv
224.323 274.356 224.163 274.876 224.163 275.536 cv
224.163 276.206 224.323 276.726 224.643 277.096 cv
224.963 277.466 225.423 277.646 226.003 277.646 cv
226.263 277.646 226.513 277.616 226.773 277.546 cv
227.033 277.476 227.283 277.366 227.543 277.226 cv
227.543 278.056 li
227.283 278.176 227.023 278.266 226.763 278.316 cv
226.493 278.366 226.203 278.396 225.903 278.396 cv
225.083 278.396 224.423 278.146 223.943 277.626 cv
223.453 277.116 223.213 276.416 223.213 275.536 cv
223.213 274.646 223.453 273.946 223.943 273.436 cv
224.433 272.926 225.103 272.666 225.963 272.666 cv
226.243 272.666 226.513 272.696 226.773 272.756 cv
227.033 272.816 227.293 272.896 227.543 273.006 cv
f
232.593 272.956 mo
232.593 273.806 li
232.333 273.686 232.073 273.586 231.803 273.516 cv
231.523 273.456 231.243 273.416 230.953 273.416 cv
230.503 273.416 230.163 273.486 229.943 273.626 cv
229.723 273.766 229.613 273.966 229.613 274.236 cv
229.613 274.446 229.693 274.606 229.853 274.726 cv
230.013 274.846 230.333 274.966 230.813 275.066 cv
231.123 275.136 li
231.763 275.276 232.213 275.476 232.483 275.716 cv
232.743 275.966 232.883 276.316 232.883 276.756 cv
232.883 277.266 232.683 277.666 232.283 277.956 cv
231.883 278.256 231.323 278.396 230.623 278.396 cv
230.323 278.396 230.023 278.366 229.703 278.316 cv
229.383 278.266 229.053 278.186 228.703 278.066 cv
228.703 277.136 li
229.033 277.316 229.363 277.446 229.683 277.526 cv
230.003 277.616 230.323 277.656 230.643 277.656 cv
231.063 277.656 231.393 277.586 231.623 277.446 cv
231.843 277.306 231.963 277.096 231.963 276.826 cv
231.963 276.586 231.873 276.396 231.713 276.266 cv
231.553 276.136 231.193 276.006 230.633 275.886 cv
230.323 275.816 li
229.763 275.696 229.353 275.516 229.113 275.276 cv
228.863 275.036 228.743 274.706 228.743 274.276 cv
228.743 273.766 228.923 273.366 229.283 273.086 cv
229.643 272.806 230.163 272.666 230.843 272.666 cv
231.173 272.666 231.483 272.696 231.783 272.746 cv
232.073 272.796 232.343 272.866 232.593 272.956 cv
f
239.653 270.676 mo
239.213 271.436 238.893 272.176 238.683 272.906 cv
238.463 273.636 238.363 274.376 238.363 275.126 cv
238.363 275.886 238.463 276.626 238.683 277.356 cv
238.893 278.096 239.213 278.826 239.653 279.576 cv
238.873 279.576 li
238.383 278.806 238.013 278.066 237.773 277.326 cv
237.533 276.586 237.413 275.856 237.413 275.126 cv
237.413 274.406 237.533 273.676 237.773 272.936 cv
238.013 272.196 238.373 271.446 238.873 270.676 cv
239.653 270.676 li
f
241.433 270.976 mo
242.903 270.976 li
244.763 275.936 li
246.633 270.976 li
248.103 270.976 li
248.103 278.266 li
247.143 278.266 li
247.143 271.866 li
245.263 276.866 li
244.273 276.866 li
242.393 271.866 li
242.393 278.266 li
241.433 278.266 li
241.433 270.976 li
f
252.503 271.946 mo
251.163 275.576 li
253.843 275.576 li
252.503 271.946 li
251.943 270.976 mo
253.063 270.976 li
255.843 278.266 li
254.813 278.266 li
254.153 276.396 li
250.863 276.396 li
250.203 278.266 li
249.163 278.266 li
251.943 270.976 li
f
257.893 271.786 mo
257.893 274.526 li
259.133 274.526 li
259.593 274.526 259.943 274.416 260.193 274.176 cv
260.443 273.936 260.573 273.596 260.573 273.156 cv
260.573 272.716 260.443 272.386 260.193 272.146 cv
259.943 271.906 259.593 271.786 259.133 271.786 cv
257.893 271.786 li
256.903 270.976 mo
259.133 270.976 li
259.943 270.976 260.563 271.166 260.983 271.536 cv
261.403 271.906 261.613 272.446 261.613 273.156 cv
261.613 273.876 261.403 274.426 260.983 274.786 cv
260.563 275.156 259.943 275.336 259.133 275.336 cv
257.893 275.336 li
257.893 278.266 li
256.903 278.266 li
256.903 270.976 li
f
262.753 270.676 mo
263.533 270.676 li
264.013 271.446 264.383 272.196 264.623 272.936 cv
264.863 273.676 264.993 274.406 264.993 275.126 cv
264.993 275.856 264.863 276.586 264.623 277.326 cv
264.383 278.066 264.013 278.806 263.533 279.576 cv
262.753 279.576 li
263.183 278.826 263.503 278.096 263.723 277.356 cv
263.933 276.626 264.043 275.886 264.043 275.126 cv
264.043 274.376 263.933 273.636 263.723 272.906 cv
263.503 272.176 263.183 271.436 262.753 270.676 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 252 mo
388.8 252 li
@
grestore
54 252 mo
58 252 li
f
54 252 mo
58 252 li
@
388.8 252 mo
384.8 252 li
f
388.8 252 mo
384.8 252 li
@
38.3613 247.468 mo
42.2313 247.468 li
42.2313 248.298 li
39.2612 248.298 li
39.2612 250.088 li
39.4012 250.038 39.5513 249.998 39.6912 249.978 cv
39.8312 249.958 39.9813 249.938 40.1213 249.938 cv
40.9313 249.938 41.5713 250.168 42.0513 250.608 cv
42.5313 251.058 42.7713 251.658 42.7713 252.418 cv
42.7713 253.208 42.5213 253.818 42.0313 254.248 cv
41.5413 254.678 40.8512 254.888 39.9712 254.888 cv
39.6613 254.888 39.3512 254.858 39.0313 254.818 cv
38.7113 254.768 38.3913 254.698 38.0513 254.588 cv
38.0513 253.598 li
38.3413 253.758 38.6413 253.878 38.9613 253.958 cv
39.2713 254.038 39.6012 254.068 39.9512 254.068 cv
40.5112 254.068 40.9613 253.928 41.2913 253.628 cv
41.6113 253.328 41.7813 252.928 41.7813 252.418 cv
41.7813 251.918 41.6113 251.518 41.2913 251.218 cv
40.9613 250.918 40.5112 250.768 39.9512 250.768 cv
39.6912 250.768 39.4212 250.798 39.1613 250.858 cv
38.9012 250.918 38.6312 251.008 38.3613 251.128 cv
38.3613 247.468 li
f
44.7413 254.608 mo
44.7413 253.708 li
44.9813 253.828 45.2313 253.918 45.4913 253.978 cv
45.7413 254.038 45.9913 254.068 46.2413 254.068 cv
46.8813 254.068 47.3813 253.858 47.7213 253.418 cv
48.0613 252.978 48.2613 252.318 48.3213 251.418 cv
48.1213 251.698 47.8813 251.918 47.6013 252.068 cv
47.3113 252.218 46.9913 252.288 46.6413 252.288 cv
45.9013 252.288 45.3213 252.068 44.9013 251.628 cv
44.4813 251.188 44.2713 250.588 44.2713 249.818 cv
44.2713 249.078 44.4913 248.478 44.9313 248.018 cv
45.3713 247.568 45.9613 247.338 46.7013 247.338 cv
47.5413 247.338 48.1913 247.668 48.6313 248.308 cv
49.0713 248.958 49.3013 249.898 49.3013 251.118 cv
49.3013 252.278 49.0213 253.188 48.4813 253.868 cv
47.9313 254.548 47.2013 254.888 46.2813 254.888 cv
46.0313 254.888 45.7813 254.858 45.5313 254.818 cv
45.2713 254.778 45.0113 254.708 44.7413 254.608 cv
46.7013 251.518 mo
47.1413 251.518 47.4913 251.368 47.7513 251.068 cv
48.0113 250.768 48.1413 250.348 48.1413 249.818 cv
48.1413 249.298 48.0113 248.878 47.7513 248.578 cv
47.4913 248.278 47.1413 248.118 46.7013 248.118 cv
46.2613 248.118 45.9113 248.278 45.6513 248.578 cv
45.3913 248.878 45.2613 249.298 45.2613 249.818 cv
45.2613 250.348 45.3913 250.768 45.6513 251.068 cv
45.9113 251.368 46.2613 251.518 46.7013 251.518 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 227.2 mo
388.8 227.2 li
@
grestore
54 227.2 mo
58 227.2 li
f
54 227.2 mo
58 227.2 li
@
388.8 227.2 mo
384.8 227.2 li
f
388.8 227.2 mo
384.8 227.2 li
@
40.5812 225.918 mo
40.1413 225.918 39.7913 226.078 39.5313 226.378 cv
39.2713 226.678 39.1413 227.098 39.1413 227.618 cv
39.1413 228.148 39.2713 228.568 39.5313 228.868 cv
39.7913 229.168 40.1413 229.318 40.5812 229.318 cv
41.0213 229.318 41.3713 229.168 41.6312 228.868 cv
41.8913 228.568 42.0213 228.148 42.0213 227.618 cv
42.0213 227.098 41.8913 226.678 41.6312 226.378 cv
41.3713 226.078 41.0213 225.918 40.5812 225.918 cv
42.5413 222.828 mo
42.5413 223.728 li
42.2913 223.608 42.0413 223.518 41.7913 223.458 cv
41.5313 223.398 41.2813 223.368 41.0413 223.368 cv
40.3812 223.368 39.8812 223.588 39.5413 224.028 cv
39.2012 224.468 39.0013 225.138 38.9613 226.018 cv
39.1512 225.738 39.3913 225.518 39.6813 225.368 cv
39.9712 225.218 40.2913 225.138 40.6413 225.138 cv
41.3713 225.138 41.9513 225.368 42.3713 225.808 cv
42.7913 226.248 43.0112 226.858 43.0112 227.618 cv
43.0112 228.368 42.7813 228.968 42.3413 229.418 cv
41.9012 229.868 41.3112 230.088 40.5812 230.088 cv
39.7412 230.088 39.0913 229.768 38.6512 229.128 cv
38.2012 228.488 37.9813 227.548 37.9813 226.318 cv
37.9813 225.168 38.2513 224.248 38.8013 223.568 cv
39.3413 222.888 40.0812 222.538 41.0013 222.538 cv
41.2412 222.538 41.4912 222.568 41.7513 222.608 cv
42.0013 222.658 42.2612 222.728 42.5413 222.828 cv
f
46.8213 223.318 mo
46.3113 223.318 45.9313 223.568 45.6713 224.068 cv
45.4113 224.568 45.2913 225.318 45.2913 226.318 cv
45.2913 227.318 45.4113 228.068 45.6713 228.568 cv
45.9313 229.068 46.3113 229.318 46.8213 229.318 cv
47.3313 229.318 47.7113 229.068 47.9713 228.568 cv
48.2213 228.068 48.3513 227.318 48.3513 226.318 cv
48.3513 225.318 48.2213 224.568 47.9713 224.068 cv
47.7113 223.568 47.3313 223.318 46.8213 223.318 cv
46.8213 222.538 mo
47.6313 222.538 48.2513 222.868 48.6913 223.508 cv
49.1213 224.158 49.3413 225.098 49.3413 226.318 cv
49.3413 227.548 49.1213 228.488 48.6913 229.128 cv
48.2513 229.768 47.6313 230.088 46.8213 230.088 cv
46.0013 230.088 45.3713 229.768 44.9413 229.128 cv
44.5113 228.488 44.3013 227.548 44.3013 226.318 cv
44.3013 225.098 44.5113 224.158 44.9413 223.508 cv
45.3713 222.868 46.0013 222.538 46.8213 222.538 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 202.4 mo
388.8 202.4 li
@
grestore
54 202.4 mo
58 202.4 li
f
54 202.4 mo
58 202.4 li
@
388.8 202.4 mo
384.8 202.4 li
f
388.8 202.4 mo
384.8 202.4 li
@
40.5812 201.118 mo
40.1413 201.118 39.7913 201.278 39.5313 201.578 cv
39.2713 201.878 39.1413 202.298 39.1413 202.818 cv
39.1413 203.348 39.2713 203.768 39.5313 204.068 cv
39.7913 204.368 40.1413 204.518 40.5812 204.518 cv
41.0213 204.518 41.3713 204.368 41.6312 204.068 cv
41.8913 203.768 42.0213 203.348 42.0213 202.818 cv
42.0213 202.298 41.8913 201.878 41.6312 201.578 cv
41.3713 201.278 41.0213 201.118 40.5812 201.118 cv
42.5413 198.028 mo
42.5413 198.928 li
42.2913 198.808 42.0413 198.718 41.7913 198.658 cv
41.5313 198.598 41.2813 198.568 41.0413 198.568 cv
40.3812 198.568 39.8812 198.788 39.5413 199.228 cv
39.2012 199.668 39.0013 200.338 38.9613 201.218 cv
39.1512 200.938 39.3913 200.718 39.6813 200.568 cv
39.9712 200.418 40.2913 200.338 40.6413 200.338 cv
41.3713 200.338 41.9513 200.568 42.3713 201.008 cv
42.7913 201.448 43.0112 202.058 43.0112 202.818 cv
43.0112 203.568 42.7813 204.168 42.3413 204.618 cv
41.9012 205.068 41.3112 205.288 40.5812 205.288 cv
39.7412 205.288 39.0913 204.968 38.6512 204.328 cv
38.2012 203.688 37.9813 202.748 37.9813 201.518 cv
37.9813 200.368 38.2513 199.448 38.8013 198.768 cv
39.3413 198.088 40.0812 197.738 41.0013 197.738 cv
41.2412 197.738 41.4912 197.768 41.7513 197.808 cv
42.0013 197.858 42.2612 197.928 42.5413 198.028 cv
f
44.8813 204.328 mo
46.4913 204.328 li
46.4913 198.768 li
44.7413 199.118 li
44.7413 198.218 li
46.4813 197.868 li
47.4713 197.868 li
47.4713 204.328 li
49.0813 204.328 li
49.0813 205.158 li
44.8813 205.158 li
44.8813 204.328 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 177.6 mo
388.8 177.6 li
@
grestore
54 177.6 mo
58 177.6 li
f
54 177.6 mo
58 177.6 li
@
388.8 177.6 mo
384.8 177.6 li
f
388.8 177.6 mo
384.8 177.6 li
@
40.5812 176.318 mo
40.1413 176.318 39.7913 176.478 39.5313 176.778 cv
39.2713 177.078 39.1413 177.498 39.1413 178.018 cv
39.1413 178.548 39.2713 178.968 39.5313 179.268 cv
39.7913 179.568 40.1413 179.718 40.5812 179.718 cv
41.0213 179.718 41.3713 179.568 41.6312 179.268 cv
41.8913 178.968 42.0213 178.548 42.0213 178.018 cv
42.0213 177.498 41.8913 177.078 41.6312 176.778 cv
41.3713 176.478 41.0213 176.318 40.5812 176.318 cv
42.5413 173.228 mo
42.5413 174.128 li
42.2913 174.008 42.0413 173.918 41.7913 173.858 cv
41.5313 173.798 41.2813 173.768 41.0413 173.768 cv
40.3812 173.768 39.8812 173.988 39.5413 174.428 cv
39.2012 174.868 39.0013 175.538 38.9613 176.418 cv
39.1512 176.138 39.3913 175.918 39.6813 175.768 cv
39.9712 175.618 40.2913 175.538 40.6413 175.538 cv
41.3713 175.538 41.9513 175.768 42.3713 176.208 cv
42.7913 176.648 43.0112 177.258 43.0112 178.018 cv
43.0112 178.768 42.7813 179.368 42.3413 179.818 cv
41.9012 180.268 41.3112 180.488 40.5812 180.488 cv
39.7412 180.488 39.0913 180.168 38.6512 179.528 cv
38.2012 178.888 37.9813 177.948 37.9813 176.718 cv
37.9813 175.568 38.2513 174.648 38.8013 173.968 cv
39.3413 173.288 40.0812 172.938 41.0013 172.938 cv
41.2412 172.938 41.4912 172.968 41.7513 173.008 cv
42.0013 173.058 42.2612 173.128 42.5413 173.228 cv
f
45.5613 179.528 mo
49.0013 179.528 li
49.0013 180.358 li
44.3713 180.358 li
44.3713 179.528 li
44.7413 179.148 45.2513 178.628 45.9013 177.968 cv
46.5413 177.318 46.9513 176.898 47.1213 176.708 cv
47.4413 176.358 47.6613 176.058 47.7813 175.808 cv
47.9013 175.568 47.9713 175.318 47.9713 175.078 cv
47.9713 174.698 47.8313 174.378 47.5613 174.138 cv
47.2913 173.898 46.9413 173.768 46.5013 173.768 cv
46.1913 173.768 45.8613 173.828 45.5213 173.928 cv
45.1813 174.038 44.8113 174.198 44.4213 174.418 cv
44.4213 173.418 li
44.8213 173.258 45.1913 173.138 45.5313 173.058 cv
45.8713 172.978 46.1913 172.938 46.4813 172.938 cv
47.2313 172.938 47.8313 173.128 48.2813 173.508 cv
48.7313 173.888 48.9613 174.388 48.9613 175.018 cv
48.9613 175.318 48.9013 175.608 48.7913 175.868 cv
48.6813 176.138 48.4813 176.458 48.1813 176.818 cv
48.1013 176.918 47.8413 177.188 47.4013 177.638 cv
46.9613 178.088 46.3513 178.718 45.5613 179.528 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 152.8 mo
388.8 152.8 li
@
grestore
54 152.8 mo
58 152.8 li
f
54 152.8 mo
58 152.8 li
@
388.8 152.8 mo
384.8 152.8 li
f
388.8 152.8 mo
384.8 152.8 li
@
40.5812 151.518 mo
40.1413 151.518 39.7913 151.678 39.5313 151.978 cv
39.2713 152.278 39.1413 152.698 39.1413 153.218 cv
39.1413 153.748 39.2713 154.168 39.5313 154.468 cv
39.7913 154.768 40.1413 154.918 40.5812 154.918 cv
41.0213 154.918 41.3713 154.768 41.6312 154.468 cv
41.8913 154.168 42.0213 153.748 42.0213 153.218 cv
42.0213 152.698 41.8913 152.278 41.6312 151.978 cv
41.3713 151.678 41.0213 151.518 40.5812 151.518 cv
42.5413 148.428 mo
42.5413 149.328 li
42.2913 149.208 42.0413 149.118 41.7913 149.058 cv
41.5313 148.998 41.2813 148.968 41.0413 148.968 cv
40.3812 148.968 39.8812 149.188 39.5413 149.628 cv
39.2012 150.068 39.0013 150.738 38.9613 151.618 cv
39.1512 151.338 39.3913 151.118 39.6813 150.968 cv
39.9712 150.818 40.2913 150.738 40.6413 150.738 cv
41.3713 150.738 41.9513 150.968 42.3713 151.408 cv
42.7913 151.848 43.0112 152.458 43.0112 153.218 cv
43.0112 153.968 42.7813 154.568 42.3413 155.018 cv
41.9012 155.468 41.3112 155.688 40.5812 155.688 cv
39.7412 155.688 39.0913 155.368 38.6512 154.728 cv
38.2012 154.088 37.9813 153.148 37.9813 151.918 cv
37.9813 150.768 38.2513 149.848 38.8013 149.168 cv
39.3413 148.488 40.0812 148.138 41.0013 148.138 cv
41.2412 148.138 41.4912 148.168 41.7513 148.208 cv
42.0013 148.258 42.2612 148.328 42.5413 148.428 cv
f
47.7013 151.628 mo
48.1713 151.728 48.5413 151.938 48.8013 152.258 cv
49.0613 152.578 49.2013 152.978 49.2013 153.438 cv
49.2013 154.158 48.9513 154.718 48.4613 155.108 cv
47.9613 155.498 47.2613 155.688 46.3513 155.688 cv
46.0413 155.688 45.7213 155.658 45.4013 155.598 cv
45.0813 155.548 44.7413 155.458 44.4013 155.338 cv
44.4013 154.388 li
44.6713 154.548 44.9713 154.668 45.3013 154.748 cv
45.6213 154.828 45.9613 154.868 46.3213 154.868 cv
46.9413 154.868 47.4113 154.748 47.7313 154.508 cv
48.0513 154.268 48.2213 153.908 48.2213 153.438 cv
48.2213 153.018 48.0713 152.678 47.7713 152.438 cv
47.4713 152.198 47.0513 152.068 46.5113 152.068 cv
45.6613 152.068 li
45.6613 151.258 li
46.5513 151.258 li
47.0313 151.258 47.4013 151.168 47.6613 150.968 cv
47.9213 150.778 48.0513 150.498 48.0513 150.128 cv
48.0513 149.758 47.9113 149.468 47.6513 149.268 cv
47.3813 149.068 47.0013 148.968 46.5113 148.968 cv
46.2413 148.968 45.9513 148.998 45.6413 149.058 cv
45.3313 149.118 44.9913 149.208 44.6213 149.328 cv
44.6213 148.448 li
44.9913 148.348 45.3413 148.268 45.6713 148.218 cv
45.9913 148.168 46.3013 148.138 46.6013 148.138 cv
47.3413 148.138 47.9313 148.308 48.3713 148.648 cv
48.8113 148.988 49.0313 149.448 49.0313 150.028 cv
49.0313 150.428 48.9113 150.768 48.6813 151.048 cv
48.4513 151.328 48.1213 151.528 47.7013 151.628 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 128 mo
388.8 128 li
@
grestore
54 128 mo
58 128 li
f
54 128 mo
58 128 li
@
388.8 128 mo
384.8 128 li
f
388.8 128 mo
384.8 128 li
@
40.5812 126.718 mo
40.1413 126.718 39.7913 126.878 39.5313 127.178 cv
39.2713 127.478 39.1413 127.898 39.1413 128.418 cv
39.1413 128.948 39.2713 129.368 39.5313 129.668 cv
39.7913 129.968 40.1413 130.118 40.5812 130.118 cv
41.0213 130.118 41.3713 129.968 41.6312 129.668 cv
41.8913 129.368 42.0213 128.948 42.0213 128.418 cv
42.0213 127.898 41.8913 127.478 41.6312 127.178 cv
41.3713 126.878 41.0213 126.718 40.5812 126.718 cv
42.5413 123.628 mo
42.5413 124.528 li
42.2913 124.408 42.0413 124.318 41.7913 124.258 cv
41.5313 124.198 41.2813 124.168 41.0413 124.168 cv
40.3812 124.168 39.8812 124.388 39.5413 124.828 cv
39.2012 125.268 39.0013 125.938 38.9613 126.818 cv
39.1512 126.538 39.3913 126.318 39.6813 126.168 cv
39.9712 126.018 40.2913 125.938 40.6413 125.938 cv
41.3713 125.938 41.9513 126.168 42.3713 126.608 cv
42.7913 127.048 43.0112 127.658 43.0112 128.418 cv
43.0112 129.168 42.7813 129.768 42.3413 130.218 cv
41.9012 130.668 41.3112 130.888 40.5812 130.888 cv
39.7412 130.888 39.0913 130.568 38.6512 129.928 cv
38.2012 129.288 37.9813 128.348 37.9813 127.118 cv
37.9813 125.968 38.2513 125.048 38.8013 124.368 cv
39.3413 123.688 40.0812 123.338 41.0013 123.338 cv
41.2412 123.338 41.4912 123.368 41.7513 123.408 cv
42.0013 123.458 42.2612 123.528 42.5413 123.628 cv
f
47.4213 124.328 mo
44.9313 128.218 li
47.4213 128.218 li
47.4213 124.328 li
47.1613 123.468 mo
48.4013 123.468 li
48.4013 128.218 li
49.4413 128.218 li
49.4413 129.038 li
48.4013 129.038 li
48.4013 130.758 li
47.4213 130.758 li
47.4213 129.038 li
44.1313 129.038 li
44.1313 128.088 li
47.1613 123.468 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 103.2 mo
388.8 103.2 li
@
grestore
54 103.2 mo
58 103.2 li
f
54 103.2 mo
58 103.2 li
@
388.8 103.2 mo
384.8 103.2 li
f
388.8 103.2 mo
384.8 103.2 li
@
40.5812 101.918 mo
40.1413 101.918 39.7913 102.078 39.5313 102.378 cv
39.2713 102.678 39.1413 103.098 39.1413 103.618 cv
39.1413 104.148 39.2713 104.568 39.5313 104.868 cv
39.7913 105.168 40.1413 105.318 40.5812 105.318 cv
41.0213 105.318 41.3713 105.168 41.6312 104.868 cv
41.8913 104.568 42.0213 104.148 42.0213 103.618 cv
42.0213 103.098 41.8913 102.678 41.6312 102.378 cv
41.3713 102.078 41.0213 101.918 40.5812 101.918 cv
42.5413 98.8278 mo
42.5413 99.7278 li
42.2913 99.6078 42.0413 99.5178 41.7913 99.4578 cv
41.5313 99.3978 41.2813 99.3678 41.0413 99.3678 cv
40.3812 99.3678 39.8812 99.5878 39.5413 100.028 cv
39.2012 100.468 39.0013 101.138 38.9613 102.018 cv
39.1512 101.738 39.3913 101.518 39.6813 101.368 cv
39.9712 101.218 40.2913 101.138 40.6413 101.138 cv
41.3713 101.138 41.9513 101.368 42.3713 101.808 cv
42.7913 102.248 43.0112 102.858 43.0112 103.618 cv
43.0112 104.368 42.7813 104.968 42.3413 105.418 cv
41.9012 105.868 41.3112 106.088 40.5812 106.088 cv
39.7412 106.088 39.0913 105.768 38.6512 105.128 cv
38.2012 104.488 37.9813 103.548 37.9813 102.318 cv
37.9813 101.168 38.2513 100.248 38.8013 99.5678 cv
39.3413 98.8878 40.0812 98.5378 41.0013 98.5378 cv
41.2412 98.5378 41.4912 98.5678 41.7513 98.6078 cv
42.0013 98.6578 42.2612 98.7278 42.5413 98.8278 cv
f
44.7213 98.6678 mo
48.5913 98.6678 li
48.5913 99.4978 li
45.6213 99.4978 li
45.6213 101.288 li
45.7613 101.238 45.9113 101.198 46.0513 101.178 cv
46.1913 101.158 46.3413 101.138 46.4813 101.138 cv
47.2913 101.138 47.9313 101.368 48.4113 101.808 cv
48.8913 102.258 49.1313 102.858 49.1313 103.618 cv
49.1313 104.408 48.8813 105.018 48.3913 105.448 cv
47.9013 105.878 47.2113 106.088 46.3313 106.088 cv
46.0213 106.088 45.7113 106.058 45.3913 106.018 cv
45.0713 105.968 44.7513 105.898 44.4113 105.788 cv
44.4113 104.798 li
44.7013 104.958 45.0013 105.078 45.3213 105.158 cv
45.6313 105.238 45.9613 105.268 46.3113 105.268 cv
46.8713 105.268 47.3213 105.128 47.6513 104.828 cv
47.9713 104.528 48.1413 104.128 48.1413 103.618 cv
48.1413 103.118 47.9713 102.718 47.6513 102.418 cv
47.3213 102.118 46.8713 101.968 46.3113 101.968 cv
46.0513 101.968 45.7813 101.998 45.5213 102.058 cv
45.2613 102.118 44.9913 102.208 44.7213 102.328 cv
44.7213 98.6678 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 78.4 mo
388.8 78.4 li
@
grestore
54 78.4 mo
58 78.4 li
f
54 78.4 mo
58 78.4 li
@
388.8 78.4 mo
384.8 78.4 li
f
388.8 78.4 mo
384.8 78.4 li
@
40.5812 77.1178 mo
40.1413 77.1178 39.7913 77.2778 39.5313 77.5778 cv
39.2713 77.8778 39.1413 78.2978 39.1413 78.8178 cv
39.1413 79.3478 39.2713 79.7678 39.5313 80.0678 cv
39.7913 80.3678 40.1413 80.5178 40.5812 80.5178 cv
41.0213 80.5178 41.3713 80.3678 41.6312 80.0678 cv
41.8913 79.7678 42.0213 79.3478 42.0213 78.8178 cv
42.0213 78.2978 41.8913 77.8778 41.6312 77.5778 cv
41.3713 77.2778 41.0213 77.1178 40.5812 77.1178 cv
42.5413 74.0278 mo
42.5413 74.9278 li
42.2913 74.8078 42.0413 74.7178 41.7913 74.6578 cv
41.5313 74.5978 41.2813 74.5678 41.0413 74.5678 cv
40.3812 74.5678 39.8812 74.7878 39.5413 75.2278 cv
39.2012 75.6678 39.0013 76.3378 38.9613 77.2178 cv
39.1512 76.9378 39.3913 76.7178 39.6813 76.5678 cv
39.9712 76.4178 40.2913 76.3378 40.6413 76.3378 cv
41.3713 76.3378 41.9513 76.5678 42.3713 77.0078 cv
42.7913 77.4478 43.0112 78.0578 43.0112 78.8178 cv
43.0112 79.5678 42.7813 80.1678 42.3413 80.6178 cv
41.9012 81.0678 41.3112 81.2878 40.5812 81.2878 cv
39.7412 81.2878 39.0913 80.9678 38.6512 80.3278 cv
38.2012 79.6878 37.9813 78.7478 37.9813 77.5178 cv
37.9813 76.3678 38.2513 75.4478 38.8013 74.7678 cv
39.3413 74.0878 40.0812 73.7378 41.0013 73.7378 cv
41.2412 73.7378 41.4912 73.7678 41.7513 73.8078 cv
42.0013 73.8578 42.2612 73.9278 42.5413 74.0278 cv
f
46.9413 77.1178 mo
46.5013 77.1178 46.1513 77.2778 45.8913 77.5778 cv
45.6313 77.8778 45.5013 78.2978 45.5013 78.8178 cv
45.5013 79.3478 45.6313 79.7678 45.8913 80.0678 cv
46.1513 80.3678 46.5013 80.5178 46.9413 80.5178 cv
47.3813 80.5178 47.7313 80.3678 47.9913 80.0678 cv
48.2513 79.7678 48.3813 79.3478 48.3813 78.8178 cv
48.3813 78.2978 48.2513 77.8778 47.9913 77.5778 cv
47.7313 77.2778 47.3813 77.1178 46.9413 77.1178 cv
48.9013 74.0278 mo
48.9013 74.9278 li
48.6513 74.8078 48.4013 74.7178 48.1513 74.6578 cv
47.8913 74.5978 47.6413 74.5678 47.4013 74.5678 cv
46.7413 74.5678 46.2413 74.7878 45.9013 75.2278 cv
45.5613 75.6678 45.3613 76.3378 45.3213 77.2178 cv
45.5113 76.9378 45.7513 76.7178 46.0413 76.5678 cv
46.3313 76.4178 46.6513 76.3378 47.0013 76.3378 cv
47.7313 76.3378 48.3113 76.5678 48.7313 77.0078 cv
49.1513 77.4478 49.3713 78.0578 49.3713 78.8178 cv
49.3713 79.5678 49.1413 80.1678 48.7013 80.6178 cv
48.2613 81.0678 47.6713 81.2878 46.9413 81.2878 cv
46.1013 81.2878 45.4513 80.9678 45.0113 80.3278 cv
44.5613 79.6878 44.3413 78.7478 44.3413 77.5178 cv
44.3413 76.3678 44.6113 75.4478 45.1613 74.7678 cv
45.7013 74.0878 46.4413 73.7378 47.3613 73.7378 cv
47.6013 73.7378 47.8513 73.7678 48.1113 73.8078 cv
48.3613 73.8578 48.6213 73.9278 48.9013 74.0278 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 53.6 mo
388.8 53.6 li
@
grestore
54 53.6 mo
58 53.6 li
f
54 53.6 mo
58 53.6 li
@
388.8 53.6 mo
384.8 53.6 li
f
388.8 53.6 mo
384.8 53.6 li
@
40.5812 52.3178 mo
40.1413 52.3178 39.7913 52.4778 39.5313 52.7778 cv
39.2713 53.0778 39.1413 53.4978 39.1413 54.0178 cv
39.1413 54.5478 39.2713 54.9678 39.5313 55.2678 cv
39.7913 55.5678 40.1413 55.7178 40.5812 55.7178 cv
41.0213 55.7178 41.3713 55.5678 41.6312 55.2678 cv
41.8913 54.9678 42.0213 54.5478 42.0213 54.0178 cv
42.0213 53.4978 41.8913 53.0778 41.6312 52.7778 cv
41.3713 52.4778 41.0213 52.3178 40.5812 52.3178 cv
42.5413 49.2278 mo
42.5413 50.1278 li
42.2913 50.0078 42.0413 49.9178 41.7913 49.8578 cv
41.5313 49.7978 41.2813 49.7678 41.0413 49.7678 cv
40.3812 49.7678 39.8812 49.9878 39.5413 50.4278 cv
39.2012 50.8678 39.0013 51.5378 38.9613 52.4178 cv
39.1512 52.1378 39.3913 51.9178 39.6813 51.7678 cv
39.9712 51.6178 40.2913 51.5378 40.6413 51.5378 cv
41.3713 51.5378 41.9513 51.7678 42.3713 52.2078 cv
42.7913 52.6478 43.0112 53.2578 43.0112 54.0178 cv
43.0112 54.7678 42.7813 55.3678 42.3413 55.8178 cv
41.9012 56.2678 41.3112 56.4878 40.5812 56.4878 cv
39.7412 56.4878 39.0913 56.1678 38.6512 55.5278 cv
38.2012 54.8878 37.9813 53.9478 37.9813 52.7178 cv
37.9813 51.5678 38.2513 50.6478 38.8013 49.9678 cv
39.3413 49.2878 40.0812 48.9378 41.0013 48.9378 cv
41.2412 48.9378 41.4912 48.9678 41.7513 49.0078 cv
42.0013 49.0578 42.2612 49.1278 42.5413 49.2278 cv
f
44.4613 49.0678 mo
49.1513 49.0678 li
49.1513 49.4878 li
46.5013 56.3578 li
45.4713 56.3578 li
47.9613 49.8978 li
44.4613 49.8978 li
44.4613 49.0678 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 28.8 mo
388.8 28.8 li
@
grestore
54 28.8 mo
58 28.8 li
f
54 28.8 mo
58 28.8 li
@
388.8 28.8 mo
384.8 28.8 li
f
388.8 28.8 mo
384.8 28.8 li
@
40.5812 27.5178 mo
40.1413 27.5178 39.7913 27.6778 39.5313 27.9778 cv
39.2713 28.2778 39.1413 28.6978 39.1413 29.2178 cv
39.1413 29.7478 39.2713 30.1678 39.5313 30.4678 cv
39.7913 30.7678 40.1413 30.9178 40.5812 30.9178 cv
41.0213 30.9178 41.3713 30.7678 41.6312 30.4678 cv
41.8913 30.1678 42.0213 29.7478 42.0213 29.2178 cv
42.0213 28.6978 41.8913 28.2778 41.6312 27.9778 cv
41.3713 27.6778 41.0213 27.5178 40.5812 27.5178 cv
42.5413 24.4278 mo
42.5413 25.3278 li
42.2913 25.2078 42.0413 25.1178 41.7913 25.0578 cv
41.5313 24.9978 41.2813 24.9678 41.0413 24.9678 cv
40.3812 24.9678 39.8812 25.1878 39.5413 25.6278 cv
39.2012 26.0678 39.0013 26.7378 38.9613 27.6178 cv
39.1512 27.3378 39.3913 27.1178 39.6813 26.9678 cv
39.9712 26.8178 40.2913 26.7378 40.6413 26.7378 cv
41.3713 26.7378 41.9513 26.9678 42.3713 27.4078 cv
42.7913 27.8478 43.0112 28.4578 43.0112 29.2178 cv
43.0112 29.9678 42.7813 30.5678 42.3413 31.0178 cv
41.9012 31.4678 41.3112 31.6878 40.5812 31.6878 cv
39.7412 31.6878 39.0913 31.3678 38.6512 30.7278 cv
38.2012 30.0878 37.9813 29.1478 37.9813 27.9178 cv
37.9813 26.7678 38.2513 25.8478 38.8013 25.1678 cv
39.3413 24.4878 40.0812 24.1378 41.0013 24.1378 cv
41.2412 24.1378 41.4912 24.1678 41.7513 24.2078 cv
42.0013 24.2578 42.2612 24.3278 42.5413 24.4278 cv
f
46.8213 28.0978 mo
46.3513 28.0978 45.9813 28.2278 45.7113 28.4778 cv
45.4413 28.7278 45.3113 29.0678 45.3113 29.5078 cv
45.3113 29.9478 45.4413 30.2978 45.7113 30.5478 cv
45.9813 30.7978 46.3513 30.9178 46.8213 30.9178 cv
47.2813 30.9178 47.6513 30.7978 47.9213 30.5378 cv
48.1913 30.2878 48.3313 29.9478 48.3313 29.5078 cv
48.3313 29.0678 48.1913 28.7278 47.9313 28.4778 cv
47.6613 28.2278 47.2913 28.0978 46.8213 28.0978 cv
45.8313 27.6778 mo
45.4113 27.5778 45.0813 27.3778 44.8413 27.0878 cv
44.6013 26.7978 44.4913 26.4478 44.4913 26.0278 cv
44.4913 25.4478 44.6913 24.9878 45.1113 24.6478 cv
45.5213 24.3078 46.0913 24.1378 46.8213 24.1378 cv
47.5413 24.1378 48.1113 24.3078 48.5313 24.6478 cv
48.9413 24.9878 49.1513 25.4478 49.1513 26.0278 cv
49.1513 26.4478 49.0313 26.7978 48.7913 27.0878 cv
48.5513 27.3778 48.2313 27.5778 47.8113 27.6778 cv
48.2813 27.7878 48.6513 28.0078 48.9213 28.3278 cv
49.1813 28.6478 49.3213 29.0478 49.3213 29.5078 cv
49.3213 30.2178 49.1013 30.7578 48.6713 31.1278 cv
48.2313 31.5078 47.6213 31.6878 46.8213 31.6878 cv
46.0113 31.6878 45.3913 31.5078 44.9613 31.1278 cv
44.5313 30.7578 44.3213 30.2178 44.3213 29.5078 cv
44.3213 29.0478 44.4513 28.6478 44.7213 28.3278 cv
44.9813 28.0078 45.3513 27.7878 45.8313 27.6778 cv
45.4713 26.1178 mo
45.4713 26.4978 45.5813 26.7978 45.8213 27.0078 cv
46.0613 27.2178 46.3913 27.3178 46.8213 27.3178 cv
47.2413 27.3178 47.5713 27.2178 47.8113 27.0078 cv
48.0513 26.7978 48.1713 26.4978 48.1713 26.1178 cv
48.1713 25.7378 48.0513 25.4478 47.8113 25.2378 cv
47.5713 25.0278 47.2413 24.9178 46.8213 24.9178 cv
46.3913 24.9178 46.0613 25.0278 45.8213 25.2378 cv
45.5813 25.4478 45.4713 25.7378 45.4713 26.1178 cv
f
22.9131 184.936 mo
22.9131 183.466 li
27.8731 181.606 li
22.9131 179.736 li
22.9131 178.266 li
30.2031 178.266 li
30.2031 179.226 li
23.8031 179.226 li
28.8031 181.106 li
28.8031 182.096 li
23.8031 183.976 li
30.2031 183.976 li
30.2031 184.936 li
22.9131 184.936 li
f
23.8831 173.866 mo
27.5131 175.206 li
27.5131 172.526 li
23.8831 173.866 li
22.9131 174.426 mo
22.9131 173.306 li
30.2031 170.526 li
30.2031 171.556 li
28.3331 172.216 li
28.3331 175.506 li
30.2031 176.166 li
30.2031 177.206 li
22.9131 174.426 li
f
23.7231 168.475 mo
26.4631 168.475 li
26.4631 167.235 li
26.4631 166.775 26.3531 166.425 26.1131 166.175 cv
25.8731 165.925 25.5331 165.796 25.0931 165.796 cv
24.6531 165.796 24.3231 165.925 24.0831 166.175 cv
23.8431 166.425 23.7231 166.775 23.7231 167.235 cv
23.7231 168.475 li
22.9131 169.465 mo
22.9131 167.235 li
22.9131 166.425 23.1031 165.805 23.4731 165.385 cv
23.8431 164.965 24.3831 164.755 25.0931 164.755 cv
25.8131 164.755 26.3631 164.965 26.7231 165.385 cv
27.0931 165.805 27.2731 166.425 27.2731 167.235 cv
27.2731 168.475 li
30.2031 168.475 li
30.2031 169.465 li
22.9131 169.465 li
f
23.8831 157.816 mo
27.5131 159.156 li
27.5131 156.476 li
23.8831 157.816 li
22.9131 158.376 mo
22.9131 157.256 li
30.2031 154.476 li
30.2031 155.506 li
28.3331 156.166 li
28.3331 159.456 li
30.2031 160.116 li
30.2031 161.156 li
22.9131 158.376 li
f
24.9431 149.516 mo
25.7831 149.516 li
25.6431 149.776 25.5431 150.026 25.4731 150.286 cv
25.4031 150.546 25.3631 150.796 25.3631 151.056 cv
25.3631 151.636 25.5531 152.096 25.9231 152.416 cv
26.2931 152.736 26.8131 152.896 27.4731 152.896 cv
28.1431 152.896 28.6631 152.736 29.0331 152.416 cv
29.4031 152.096 29.5831 151.636 29.5831 151.056 cv
29.5831 150.796 29.5531 150.546 29.4831 150.286 cv
29.4131 150.026 29.3031 149.776 29.1631 149.516 cv
29.9931 149.516 li
30.1131 149.776 30.2031 150.036 30.2531 150.296 cv
30.3031 150.566 30.3331 150.856 30.3331 151.156 cv
30.3331 151.976 30.0831 152.636 29.5631 153.116 cv
29.0531 153.606 28.3531 153.846 27.4731 153.846 cv
26.5831 153.846 25.8831 153.606 25.3731 153.116 cv
24.8631 152.626 24.6031 151.956 24.6031 151.096 cv
24.6031 150.816 24.6331 150.546 24.6931 150.286 cv
24.7531 150.026 24.8331 149.766 24.9431 149.516 cv
f
24.9431 144.016 mo
25.7831 144.016 li
25.6431 144.276 25.5431 144.526 25.4731 144.786 cv
25.4031 145.046 25.3631 145.296 25.3631 145.556 cv
25.3631 146.136 25.5531 146.596 25.9231 146.916 cv
26.2931 147.236 26.8131 147.396 27.4731 147.396 cv
28.1431 147.396 28.6631 147.236 29.0331 146.916 cv
29.4031 146.596 29.5831 146.136 29.5831 145.556 cv
29.5831 145.296 29.5531 145.046 29.4831 144.786 cv
29.4131 144.526 29.3031 144.276 29.1631 144.016 cv
29.9931 144.016 li
30.1131 144.276 30.2031 144.536 30.2531 144.796 cv
30.3031 145.066 30.3331 145.356 30.3331 145.656 cv
30.3331 146.476 30.0831 147.136 29.5631 147.616 cv
29.0531 148.106 28.3531 148.346 27.4731 148.346 cv
26.5831 148.346 25.8831 148.106 25.3731 147.616 cv
24.8631 147.126 24.6031 146.456 24.6031 145.596 cv
24.6031 145.316 24.6331 145.046 24.6931 144.786 cv
24.7531 144.526 24.8331 144.266 24.9431 144.016 cv
f
28.0431 142.545 mo
24.7331 142.545 li
24.7331 141.645 li
28.0131 141.645 li
28.5331 141.645 28.9131 141.545 29.1731 141.345 cv
29.4331 141.145 29.5631 140.845 29.5631 140.435 cv
29.5631 139.955 29.4131 139.565 29.1031 139.285 cv
28.7931 139.005 28.3731 138.865 27.8331 138.865 cv
24.7331 138.865 li
24.7331 137.965 li
30.2031 137.965 li
30.2031 138.865 li
29.3631 138.865 li
29.7031 139.085 29.9431 139.345 30.1031 139.625 cv
30.2531 139.915 30.3331 140.245 30.3331 140.625 cv
30.3331 141.255 30.1431 141.735 29.7531 142.055 cv
29.3731 142.385 28.8031 142.545 28.0431 142.545 cv
f
25.5731 132.945 mo
25.5131 133.045 25.4731 133.155 25.4431 133.275 cv
25.4231 133.395 25.4031 133.525 25.4031 133.665 cv
25.4031 134.175 25.5731 134.565 25.9031 134.835 cv
26.2331 135.115 26.7031 135.245 27.3231 135.245 cv
30.2031 135.245 li
30.2031 136.145 li
24.7331 136.145 li
24.7331 135.245 li
25.5831 135.245 li
25.2531 135.065 25.0031 134.815 24.8431 134.515 cv
24.6831 134.215 24.6031 133.845 24.6031 133.405 cv
24.6131 133.195 li
24.6231 133.125 24.6331 133.045 24.6531 132.945 cv
25.5731 132.945 li
f
27.4531 129.516 mo
27.4531 130.245 27.5431 130.745 27.7031 131.025 cv
27.8731 131.305 28.1531 131.445 28.5531 131.445 cv
28.8731 131.445 29.1331 131.345 29.3131 131.135 cv
29.5031 130.925 29.5931 130.635 29.5931 130.275 cv
29.5931 129.775 29.4231 129.375 29.0631 129.076 cv
28.7131 128.775 28.2431 128.625 27.6531 128.625 cv
27.4531 128.625 li
27.4531 129.516 li
27.0831 127.725 mo
30.2031 127.725 li
30.2031 128.625 li
29.3731 128.625 li
29.7131 128.835 29.9531 129.095 30.1031 129.395 cv
30.2531 129.695 30.3331 130.076 30.3331 130.516 cv
30.3331 131.076 30.1831 131.525 29.8731 131.855 cv
29.5631 132.186 29.1431 132.345 28.6131 132.345 cv
28.0031 132.345 27.5431 132.145 27.2231 131.725 cv
26.9131 131.315 26.7531 130.705 26.7531 129.885 cv
26.7531 128.625 li
26.6631 128.625 li
26.2531 128.625 25.9331 128.766 25.7031 129.035 cv
25.4831 129.305 25.3631 129.686 25.3631 130.175 cv
25.3631 130.495 25.4031 130.796 25.4831 131.095 cv
25.5631 131.395 25.6731 131.675 25.8131 131.945 cv
24.9831 131.945 li
24.8631 131.625 24.7631 131.305 24.7031 130.995 cv
24.6431 130.686 24.6031 130.385 24.6031 130.085 cv
24.6031 129.296 24.8131 128.705 25.2231 128.315 cv
25.6331 127.925 26.2531 127.725 27.0831 127.725 cv
f
24.9431 121.935 mo
25.7831 121.935 li
25.6431 122.195 25.5431 122.445 25.4731 122.705 cv
25.4031 122.965 25.3631 123.215 25.3631 123.475 cv
25.3631 124.055 25.5531 124.515 25.9231 124.835 cv
26.2931 125.155 26.8131 125.315 27.4731 125.315 cv
28.1431 125.315 28.6631 125.155 29.0331 124.835 cv
29.4031 124.515 29.5831 124.055 29.5831 123.475 cv
29.5831 123.215 29.5531 122.965 29.4831 122.705 cv
29.4131 122.445 29.3031 122.195 29.1631 121.935 cv
29.9931 121.935 li
30.1131 122.195 30.2031 122.455 30.2531 122.715 cv
30.3031 122.985 30.3331 123.275 30.3331 123.575 cv
30.3331 124.395 30.0831 125.055 29.5631 125.535 cv
29.0531 126.025 28.3531 126.265 27.4731 126.265 cv
26.5831 126.265 25.8831 126.025 25.3731 125.535 cv
24.8631 125.045 24.6031 124.375 24.6031 123.515 cv
24.6031 123.235 24.6331 122.965 24.6931 122.705 cv
24.7531 122.445 24.8331 122.185 24.9431 121.935 cv
f
30.7031 118.095 mo
31.3431 118.355 31.7731 118.605 31.9731 118.845 cv
32.1731 119.085 32.2731 119.405 32.2731 119.805 cv
32.2731 120.525 li
31.5231 120.525 li
31.5231 119.995 li
31.5231 119.755 31.4631 119.565 31.3431 119.425 cv
31.2231 119.285 30.9531 119.135 30.5131 118.965 cv
30.1131 118.805 li
24.7331 121.015 li
24.7331 120.065 li
29.0131 118.355 li
24.7331 116.645 li
24.7331 115.695 li
30.7031 118.095 li
f
22.6131 109.116 mo
23.3731 109.556 24.1131 109.876 24.8431 110.086 cv
25.5731 110.306 26.3131 110.406 27.0631 110.406 cv
27.8231 110.406 28.5631 110.306 29.2931 110.086 cv
30.0331 109.876 30.7631 109.556 31.5131 109.116 cv
31.5131 109.896 li
30.7431 110.386 30.0031 110.756 29.2631 110.996 cv
28.5231 111.236 27.7931 111.356 27.0631 111.356 cv
26.3431 111.356 25.6131 111.236 24.8731 110.996 cv
24.1331 110.756 23.3831 110.396 22.6131 109.896 cv
22.6131 109.116 li
f
26.9931 101.046 mo
26.9931 101.326 27.1131 101.556 27.3531 101.716 cv
27.5931 101.876 27.9331 101.956 28.3631 101.956 cv
28.7831 101.956 29.1231 101.876 29.3631 101.716 cv
29.6031 101.556 29.7231 101.326 29.7231 101.046 cv
29.7231 100.766 29.6031 100.546 29.3631 100.386 cv
29.1231 100.226 28.7831 100.146 28.3631 100.146 cv
27.9431 100.146 27.6031 100.226 27.3631 100.386 cv
27.1231 100.546 26.9931 100.766 26.9931 101.046 cv
26.3731 101.046 mo
26.3731 100.536 26.5531 100.126 26.9131 99.8255 cv
27.2731 99.5255 27.7631 99.3655 28.3631 99.3655 cv
28.9731 99.3655 29.4531 99.5255 29.8031 99.8255 cv
30.1631 100.126 30.3331 100.536 30.3331 101.046 cv
30.3331 101.566 30.1631 101.986 29.8031 102.286 cv
29.4531 102.586 28.9731 102.736 28.3631 102.736 cv
27.7531 102.736 27.2731 102.586 26.9131 102.286 cv
26.5531 101.986 26.3731 101.566 26.3731 101.046 cv
23.4031 106.086 mo
23.4031 106.366 23.5331 106.586 23.7731 106.746 cv
24.0131 106.906 24.3431 106.986 24.7631 106.986 cv
25.2031 106.986 25.5331 106.906 25.7731 106.746 cv
26.0131 106.586 26.1331 106.366 26.1331 106.086 cv
26.1331 105.806 26.0131 105.576 25.7731 105.416 cv
25.5331 105.256 25.2031 105.176 24.7631 105.176 cv
24.3431 105.176 24.0131 105.266 23.7731 105.426 cv
23.5331 105.586 23.4031 105.806 23.4031 106.086 cv
22.7831 101.676 mo
22.7831 100.896 li
30.3331 105.456 li
30.3331 106.236 li
22.7831 101.676 li
22.7831 106.086 mo
22.7831 105.576 22.9631 105.166 23.3231 104.856 cv
23.6831 104.556 24.1631 104.396 24.7631 104.396 cv
25.3831 104.396 25.8631 104.556 26.2231 104.856 cv
26.5831 105.156 26.7531 105.566 26.7531 106.086 cv
26.7531 106.606 26.5831 107.016 26.2231 107.316 cv
25.8631 107.616 25.3831 107.766 24.7631 107.766 cv
24.1631 107.766 23.6831 107.616 23.3231 107.316 cv
22.9631 107.016 22.7831 106.606 22.7831 106.086 cv
f
22.6131 98.0155 mo
22.6131 97.2355 li
23.3831 96.7556 24.1331 96.3856 24.8731 96.1456 cv
25.6131 95.9055 26.3431 95.7756 27.0631 95.7756 cv
27.7931 95.7756 28.5231 95.9055 29.2631 96.1456 cv
30.0031 96.3856 30.7431 96.7556 31.5131 97.2355 cv
31.5131 98.0155 li
30.7631 97.5855 30.0331 97.2655 29.2931 97.0456 cv
28.5631 96.8355 27.8231 96.7256 27.0631 96.7256 cv
26.3131 96.7256 25.5731 96.8355 24.8431 97.0456 cv
24.1131 97.2655 23.3731 97.5855 22.6131 98.0155 cv
f
188.095 19.696 mo
188.347 19.792 188.599 19.972 188.839 20.248 cv
189.079 20.536 189.319 20.92 189.559 21.412 cv
190.759 23.8 li
189.487 23.8 li
188.371 21.556 li
188.083 20.98 187.795 20.584 187.531 20.392 cv
187.255 20.2 186.883 20.104 186.415 20.104 cv
185.131 20.104 li
185.131 23.8 li
183.943 23.8 li
183.943 15.052 li
186.619 15.052 li
187.615 15.052 188.359 15.268 188.851 15.676 cv
189.343 16.096 189.595 16.732 189.595 17.572 cv
189.595 18.124 189.463 18.592 189.211 18.952 cv
188.947 19.312 188.575 19.564 188.095 19.696 cv
185.131 16.024 mo
185.131 19.132 li
186.619 19.132 li
187.183 19.132 187.615 19 187.903 18.736 cv
188.191 18.472 188.347 18.088 188.347 17.572 cv
188.347 17.068 188.191 16.684 187.903 16.42 cv
187.615 16.156 187.183 16.024 186.619 16.024 cv
185.131 16.024 li
f
197.851 20.248 mo
197.851 20.776 li
192.895 20.776 li
192.943 21.52 193.159 22.096 193.567 22.48 cv
193.963 22.864 194.515 23.056 195.235 23.056 cv
195.643 23.056 196.051 23.008 196.435 22.912 cv
196.819 22.816 197.215 22.66 197.599 22.444 cv
197.599 23.464 li
197.215 23.632 196.819 23.764 196.411 23.836 cv
196.003 23.908 195.583 23.956 195.175 23.956 cv
194.119 23.956 193.291 23.656 192.679 23.056 cv
192.067 22.456 191.767 21.628 191.767 20.584 cv
191.767 19.516 192.055 18.664 192.631 18.028 cv
193.207 17.404 193.999 17.08 194.983 17.08 cv
195.871 17.08 196.567 17.368 197.083 17.932 cv
197.587 18.508 197.851 19.276 197.851 20.248 cv
196.771 19.936 mo
196.759 19.348 196.591 18.88 196.279 18.52 cv
195.955 18.172 195.523 17.992 194.995 17.992 cv
194.395 17.992 193.915 18.172 193.555 18.508 cv
193.195 18.844 192.979 19.324 192.931 19.936 cv
196.771 19.936 li
f
202.603 20.5 mo
201.727 20.5 201.127 20.608 200.791 20.8 cv
200.455 21.004 200.287 21.34 200.287 21.82 cv
200.287 22.204 200.407 22.516 200.659 22.732 cv
200.911 22.96 201.259 23.068 201.691 23.068 cv
202.291 23.068 202.771 22.864 203.131 22.432 cv
203.491 22.012 203.671 21.448 203.671 20.74 cv
203.671 20.5 li
202.603 20.5 li
204.751 20.056 mo
204.751 23.8 li
203.671 23.8 li
203.671 22.804 li
203.419 23.212 203.107 23.5 202.747 23.68 cv
202.387 23.86 201.931 23.956 201.403 23.956 cv
200.731 23.956 200.191 23.776 199.795 23.404 cv
199.399 23.032 199.207 22.528 199.207 21.892 cv
199.207 21.16 199.447 20.608 199.951 20.224 cv
200.443 19.852 201.175 19.66 202.159 19.66 cv
203.671 19.66 li
203.671 19.552 li
203.671 19.06 203.503 18.676 203.179 18.4 cv
202.855 18.136 202.399 17.992 201.811 17.992 cv
201.427 17.992 201.067 18.04 200.707 18.136 cv
200.347 18.232 200.011 18.364 199.687 18.532 cv
199.687 17.536 li
200.071 17.392 200.455 17.272 200.827 17.2 cv
201.199 17.128 201.559 17.08 201.919 17.08 cv
202.867 17.08 203.575 17.332 204.043 17.824 cv
204.511 18.316 204.751 19.06 204.751 20.056 cv
f
206.971 14.68 mo
208.051 14.68 li
208.051 23.8 li
206.971 23.8 li
206.971 14.68 li
f
215.359 16.024 mo
215.359 22.828 li
216.787 22.828 li
217.987 22.828 218.875 22.564 219.439 22.012 cv
219.991 21.46 220.279 20.596 220.279 19.42 cv
220.279 18.244 219.991 17.392 219.439 16.84 cv
218.875 16.3 217.987 16.024 216.787 16.024 cv
215.359 16.024 li
214.171 15.052 mo
216.607 15.052 li
218.299 15.052 219.547 15.412 220.339 16.108 cv
221.131 16.816 221.527 17.92 221.527 19.42 cv
221.527 20.932 221.119 22.036 220.327 22.744 cv
219.535 23.452 218.287 23.8 216.607 23.8 cv
214.171 23.8 li
214.171 15.052 li
f
226.351 20.5 mo
225.475 20.5 224.875 20.608 224.539 20.8 cv
224.203 21.004 224.035 21.34 224.035 21.82 cv
224.035 22.204 224.155 22.516 224.407 22.732 cv
224.659 22.96 225.007 23.068 225.439 23.068 cv
226.039 23.068 226.519 22.864 226.879 22.432 cv
227.239 22.012 227.419 21.448 227.419 20.74 cv
227.419 20.5 li
226.351 20.5 li
228.499 20.056 mo
228.499 23.8 li
227.419 23.8 li
227.419 22.804 li
227.167 23.212 226.855 23.5 226.495 23.68 cv
226.135 23.86 225.679 23.956 225.151 23.956 cv
224.479 23.956 223.939 23.776 223.543 23.404 cv
223.147 23.032 222.955 22.528 222.955 21.892 cv
222.955 21.16 223.195 20.608 223.699 20.224 cv
224.191 19.852 224.923 19.66 225.907 19.66 cv
227.419 19.66 li
227.419 19.552 li
227.419 19.06 227.251 18.676 226.927 18.4 cv
226.603 18.136 226.147 17.992 225.559 17.992 cv
225.175 17.992 224.815 18.04 224.455 18.136 cv
224.095 18.232 223.759 18.364 223.435 18.532 cv
223.435 17.536 li
223.819 17.392 224.203 17.272 224.575 17.2 cv
224.947 17.128 225.307 17.08 225.667 17.08 cv
226.615 17.08 227.323 17.332 227.791 17.824 cv
228.259 18.316 228.499 19.06 228.499 20.056 cv
f
231.787 15.376 mo
231.787 17.236 li
234.007 17.236 li
234.007 18.076 li
231.787 18.076 li
231.787 21.64 li
231.787 22.18 231.859 22.528 232.003 22.672 cv
232.147 22.828 232.447 22.9 232.903 22.9 cv
234.007 22.9 li
234.007 23.8 li
232.903 23.8 li
232.063 23.8 231.487 23.644 231.175 23.332 cv
230.863 23.02 230.707 22.456 230.707 21.64 cv
230.707 18.076 li
229.915 18.076 li
229.915 17.236 li
230.707 17.236 li
230.707 15.376 li
231.787 15.376 li
f
241.039 20.248 mo
241.039 20.776 li
236.083 20.776 li
236.131 21.52 236.347 22.096 236.755 22.48 cv
237.151 22.864 237.703 23.056 238.423 23.056 cv
238.831 23.056 239.239 23.008 239.623 22.912 cv
240.007 22.816 240.403 22.66 240.787 22.444 cv
240.787 23.464 li
240.403 23.632 240.007 23.764 239.599 23.836 cv
239.191 23.908 238.771 23.956 238.363 23.956 cv
237.307 23.956 236.479 23.656 235.867 23.056 cv
235.255 22.456 234.955 21.628 234.955 20.584 cv
234.955 19.516 235.243 18.664 235.819 18.028 cv
236.395 17.404 237.187 17.08 238.171 17.08 cv
239.059 17.08 239.755 17.368 240.271 17.932 cv
240.775 18.508 241.039 19.276 241.039 20.248 cv
239.959 19.936 mo
239.947 19.348 239.779 18.88 239.467 18.52 cv
239.143 18.172 238.711 17.992 238.183 17.992 cv
237.583 17.992 237.103 18.172 236.743 18.508 cv
236.383 18.844 236.167 19.324 236.119 19.936 cv
239.959 19.936 li
f
246.992 17.428 mo
246.992 18.448 li
246.68 18.304 246.368 18.184 246.044 18.1 cv
245.708 18.028 245.372 17.98 245.024 17.98 cv
244.484 17.98 244.076 18.064 243.812 18.232 cv
243.548 18.4 243.416 18.64 243.416 18.964 cv
243.416 19.216 243.512 19.408 243.704 19.552 cv
243.896 19.696 244.28 19.84 244.855 19.96 cv
245.228 20.044 li
245.996 20.212 246.536 20.452 246.86 20.74 cv
247.172 21.04 247.34 21.46 247.34 21.988 cv
247.34 22.6 247.1 23.08 246.62 23.428 cv
246.14 23.788 245.468 23.956 244.628 23.956 cv
244.268 23.956 243.908 23.92 243.524 23.86 cv
243.14 23.8 242.743 23.704 242.324 23.56 cv
242.324 22.444 li
242.72 22.66 243.116 22.816 243.5 22.912 cv
243.883 23.02 244.268 23.068 244.652 23.068 cv
245.156 23.068 245.552 22.984 245.827 22.816 cv
246.092 22.648 246.236 22.396 246.236 22.072 cv
246.236 21.784 246.128 21.556 245.936 21.4 cv
245.743 21.244 245.312 21.088 244.64 20.944 cv
244.268 20.86 li
243.596 20.716 243.104 20.5 242.816 20.212 cv
242.516 19.924 242.372 19.528 242.372 19.012 cv
242.372 18.4 242.588 17.92 243.02 17.584 cv
243.452 17.248 244.076 17.08 244.892 17.08 cv
245.288 17.08 245.66 17.116 246.02 17.176 cv
246.368 17.236 246.692 17.32 246.992 17.428 cv
f
254.671 20.248 mo
254.671 20.776 li
249.715 20.776 li
249.763 21.52 249.979 22.096 250.387 22.48 cv
250.783 22.864 251.335 23.056 252.055 23.056 cv
252.463 23.056 252.871 23.008 253.255 22.912 cv
253.639 22.816 254.035 22.66 254.419 22.444 cv
254.419 23.464 li
254.035 23.632 253.639 23.764 253.231 23.836 cv
252.823 23.908 252.403 23.956 251.995 23.956 cv
250.939 23.956 250.111 23.656 249.499 23.056 cv
248.887 22.456 248.587 21.628 248.587 20.584 cv
248.587 19.516 248.875 18.664 249.451 18.028 cv
250.027 17.404 250.819 17.08 251.803 17.08 cv
252.691 17.08 253.387 17.368 253.903 17.932 cv
254.407 18.508 254.671 19.276 254.671 20.248 cv
253.591 19.936 mo
253.579 19.348 253.411 18.88 253.099 18.52 cv
252.775 18.172 252.343 17.992 251.815 17.992 cv
251.215 17.992 250.735 18.172 250.375 18.508 cv
250.015 18.844 249.799 19.324 249.751 19.936 cv
253.591 19.936 li
f
257.504 15.376 mo
257.504 17.236 li
259.724 17.236 li
259.724 18.076 li
257.504 18.076 li
257.504 21.64 li
257.504 22.18 257.576 22.528 257.72 22.672 cv
257.864 22.828 258.164 22.9 258.62 22.9 cv
259.724 22.9 li
259.724 23.8 li
258.62 23.8 li
257.78 23.8 257.204 23.644 256.892 23.332 cv
256.58 23.02 256.424 22.456 256.424 21.64 cv
256.424 18.076 li
255.632 18.076 li
255.632 17.236 li
256.424 17.236 li
256.424 15.376 li
257.504 15.376 li
f
304.788 73.65 mo
382.8 73.65 li
382.8 34.8 li
304.788 34.8 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
304.788 73.65 mo
382.8 73.65 li
382.8 34.8 li
304.788 34.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
313.188 44.525 mo
329.987 44.525 li
3.0518e-5 1 1 3.0518e-5 cmyk
@
345.359 47.741 mo
345.359 51.209 li
344.28 51.209 li
344.28 42.161 li
345.359 42.161 li
345.359 43.157 li
345.576 42.773 345.863 42.485 346.211 42.293 cv
346.56 42.101 346.979 42.005 347.46 42.005 cv
348.251 42.005 348.9 42.329 349.404 42.953 cv
349.896 43.589 350.147 44.417 350.147 45.449 cv
350.147 46.481 349.896 47.321 349.404 47.945 cv
348.9 48.569 348.251 48.881 347.46 48.881 cv
346.979 48.881 346.56 48.785 346.211 48.605 cv
345.863 48.425 345.576 48.137 345.359 47.741 cv
349.031 45.449 mo
349.031 44.657 348.863 44.045 348.539 43.589 cv
348.203 43.133 347.759 42.905 347.195 42.905 cv
346.62 42.905 346.176 43.133 345.852 43.589 cv
345.516 44.045 345.359 44.657 345.359 45.449 cv
345.359 46.241 345.516 46.865 345.852 47.321 cv
346.176 47.777 346.62 47.993 347.195 47.993 cv
347.759 47.993 348.203 47.777 348.539 47.321 cv
348.863 46.865 349.031 46.241 349.031 45.449 cv
1 /0 /CSD get_res sepcs
1 sep
f
356.255 43.157 mo
356.255 39.605 li
357.335 39.605 li
357.335 48.725 li
356.255 48.725 li
356.255 47.741 li
356.027 48.137 355.739 48.425 355.391 48.605 cv
355.043 48.785 354.635 48.881 354.155 48.881 cv
353.363 48.881 352.715 48.569 352.211 47.945 cv
351.707 47.321 351.467 46.481 351.467 45.449 cv
351.467 44.417 351.707 43.589 352.211 42.953 cv
352.715 42.329 353.363 42.005 354.155 42.005 cv
354.635 42.005 355.043 42.101 355.391 42.293 cv
355.739 42.485 356.027 42.773 356.255 43.157 cv
352.583 45.449 mo
352.583 46.241 352.739 46.865 353.063 47.321 cv
353.387 47.777 353.843 47.993 354.419 47.993 cv
354.983 47.993 355.427 47.777 355.763 47.321 cv
356.087 46.865 356.255 46.241 356.255 45.449 cv
356.255 44.657 356.087 44.045 355.763 43.589 cv
355.427 43.133 354.983 42.905 354.419 42.905 cv
353.843 42.905 353.387 43.133 353.063 43.589 cv
352.739 44.045 352.583 44.657 352.583 45.449 cv
f
360.791 40.949 mo
360.791 44.237 li
362.279 44.237 li
362.831 44.237 363.251 44.105 363.551 43.817 cv
363.851 43.529 364.007 43.121 364.007 42.593 cv
364.007 42.065 363.851 41.669 363.551 41.381 cv
363.251 41.093 362.831 40.949 362.279 40.949 cv
360.791 40.949 li
359.603 39.977 mo
362.279 39.977 li
363.251 39.977 363.995 40.205 364.499 40.649 cv
365.003 41.093 365.255 41.741 365.255 42.593 cv
365.255 43.457 365.003 44.117 364.499 44.549 cv
363.995 44.993 363.251 45.209 362.279 45.209 cv
360.791 45.209 li
360.791 48.725 li
359.603 48.725 li
359.603 39.977 li
f
370.595 43.169 mo
370.475 43.097 370.343 43.049 370.199 43.013 cv
370.055 42.989 369.899 42.965 369.731 42.965 cv
369.119 42.965 368.651 43.169 368.327 43.565 cv
367.991 43.961 367.835 44.525 367.835 45.269 cv
367.835 48.725 li
366.755 48.725 li
366.755 42.161 li
367.835 42.161 li
367.835 43.181 li
368.051 42.785 368.351 42.485 368.711 42.293 cv
369.071 42.101 369.515 42.005 370.043 42.005 cv
370.115 42.005 370.199 42.017 370.295 42.017 cv
370.379 42.029 370.475 42.041 370.595 42.065 cv
370.595 43.169 li
f
377.339 45.173 mo
377.339 45.701 li
372.383 45.701 li
372.431 46.445 372.647 47.021 373.055 47.405 cv
373.451 47.789 374.003 47.981 374.723 47.981 cv
375.131 47.981 375.539 47.933 375.923 47.837 cv
376.307 47.741 376.703 47.585 377.087 47.369 cv
377.087 48.389 li
376.703 48.557 376.307 48.689 375.899 48.761 cv
375.491 48.833 375.071 48.881 374.663 48.881 cv
373.607 48.881 372.779 48.581 372.167 47.981 cv
371.555 47.381 371.255 46.553 371.255 45.509 cv
371.255 44.441 371.543 43.589 372.119 42.953 cv
372.695 42.329 373.487 42.005 374.471 42.005 cv
375.359 42.005 376.055 42.293 376.571 42.857 cv
377.075 43.433 377.339 44.201 377.339 45.173 cv
376.259 44.861 mo
376.247 44.273 376.079 43.805 375.767 43.445 cv
375.443 43.097 375.011 42.917 374.483 42.917 cv
373.883 42.917 373.403 43.097 373.043 43.433 cv
372.683 43.769 372.467 44.249 372.419 44.861 cv
376.259 44.861 li
f
0 lc
[6 6 ] 0 dsh
313.188 62.15 mo
329.987 62.15 li
.948119 .783108 3.0518e-5 3.0518e-5 cmyk
@
345.552 58.574 mo
345.552 61.862 li
347.039 61.862 li
347.591 61.862 348.012 61.73 348.311 61.442 cv
348.612 61.154 348.767 60.746 348.767 60.218 cv
348.767 59.69 348.612 59.294 348.311 59.006 cv
348.012 58.718 347.591 58.574 347.039 58.574 cv
345.552 58.574 li
344.363 57.602 mo
347.039 57.602 li
348.012 57.602 348.755 57.83 349.259 58.274 cv
349.763 58.718 350.016 59.366 350.016 60.218 cv
350.016 61.082 349.763 61.742 349.259 62.174 cv
348.755 62.618 348.012 62.834 347.039 62.834 cv
345.552 62.834 li
345.552 66.35 li
344.363 66.35 li
344.363 57.602 li
1 /0 /CSD get_res sepcs
1 sep
f
355.355 60.794 mo
355.235 60.722 355.103 60.674 354.959 60.638 cv
354.815 60.614 354.659 60.59 354.491 60.59 cv
353.879 60.59 353.411 60.794 353.087 61.19 cv
352.751 61.586 352.595 62.15 352.595 62.894 cv
352.595 66.35 li
351.515 66.35 li
351.515 59.786 li
352.595 59.786 li
352.595 60.806 li
352.811 60.41 353.111 60.11 353.471 59.918 cv
353.831 59.726 354.275 59.63 354.803 59.63 cv
354.875 59.63 354.959 59.642 355.055 59.642 cv
355.139 59.654 355.235 59.666 355.355 59.69 cv
355.355 60.794 li
f
362.099 62.798 mo
362.099 63.326 li
357.143 63.326 li
357.191 64.07 357.407 64.646 357.815 65.03 cv
358.211 65.414 358.763 65.606 359.483 65.606 cv
359.891 65.606 360.299 65.558 360.683 65.462 cv
361.067 65.366 361.463 65.21 361.847 64.994 cv
361.847 66.014 li
361.463 66.182 361.067 66.314 360.659 66.386 cv
360.251 66.458 359.831 66.506 359.423 66.506 cv
358.367 66.506 357.539 66.206 356.927 65.606 cv
356.315 65.006 356.015 64.178 356.015 63.134 cv
356.015 62.066 356.303 61.214 356.879 60.578 cv
357.455 59.954 358.247 59.63 359.231 59.63 cv
360.119 59.63 360.815 59.918 361.331 60.482 cv
361.835 61.058 362.099 61.826 362.099 62.798 cv
361.019 62.486 mo
361.007 61.898 360.839 61.43 360.527 61.07 cv
360.203 60.722 359.771 60.542 359.243 60.542 cv
358.643 60.542 358.163 60.722 357.803 61.058 cv
357.443 61.394 357.227 61.874 357.179 62.486 cv
361.019 62.486 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
