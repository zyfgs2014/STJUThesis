%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1.pdf
%%Creator: Adobe Acrobat 9.1.2
%%For: azyf
%%CreationDate: 2016-06-28, 22:27:20
%%BoundingBox: 0 0 432 288
%%HiResBoundingBox: 0 0 432 288
%%CropBox: 0 0 432 288
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 567 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-06-28T22:17:20+08:00"
   xmp:CreatorTool="matplotlib 1.5.1, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
432 288 li
432 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 288 mo
432 288 li
432 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 204.108 mo
91.2 179.364 li
128.4 161.923 li
165.6 149.456 li
202.8 132.588 li
240 110.874 li
277.2 96.047 li
314.4 81.1245 li
351.6 66.202 li
388.8 54.6593 li
/1 
[/DeviceCMYK] /CSA add_res
3.0518e-5 1 1 3.0518e-5 cmyk
@
grestore
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
54 209.433 mo
91.2 192.246 li
128.4 174.964 li
165.6 158.097 li
202.8 143.206 li
240 121.077 li
277.2 100.957 li
314.4 89.0321 li
351.6 75.8314 li
388.8 64.4801 li
.948119 .783108 3.0518e-5 3.0518e-5 cmyk
@
grestore
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[1 3 ] 0 dsh
true sadj
54 226.619 mo
91.2 204.14 li
128.4 183.573 li
165.6 169.831 li
202.8 153.282 li
240 137.817 li
277.2 119.387 li
314.4 104.465 li
351.6 93.1135 li
388.8 81.0288 li
.38291 .924498 3.0518e-5 3.0518e-5 cmyk
@
gsave
50.75 229.869 mo
57.25 229.869 li
57.25 223.369 li
50.75 223.369 li
cp
clp
51 229.619 mo
57 223.619 li
51 223.619 mo
57 229.619 li
f
.5 lw
[] 0 dsh
51 229.619 mo
57 223.619 li
51 223.619 mo
57 229.619 li
@
grestore
gsave
87.95 207.39 mo
94.45 207.39 li
94.45 200.89 li
87.95 200.89 li
cp
clp
88.2 207.14 mo
94.2 201.14 li
88.2 201.14 mo
94.2 207.14 li
f
.5 lw
[] 0 dsh
88.2 207.14 mo
94.2 201.14 li
88.2 201.14 mo
94.2 207.14 li
@
grestore
gsave
125.15 186.823 mo
131.65 186.823 li
131.65 180.323 li
125.15 180.323 li
cp
clp
125.4 186.573 mo
131.4 180.573 li
125.4 180.573 mo
131.4 186.573 li
f
.5 lw
[] 0 dsh
125.4 186.573 mo
131.4 180.573 li
125.4 180.573 mo
131.4 186.573 li
@
grestore
gsave
162.35 173.081 mo
168.85 173.081 li
168.85 166.581 li
162.35 166.581 li
cp
clp
162.6 172.831 mo
168.6 166.831 li
162.6 166.831 mo
168.6 172.831 li
f
.5 lw
[] 0 dsh
162.6 172.831 mo
168.6 166.831 li
162.6 166.831 mo
168.6 172.831 li
@
grestore
gsave
199.55 156.532 mo
206.05 156.532 li
206.05 150.032 li
199.55 150.032 li
cp
clp
199.8 156.282 mo
205.8 150.282 li
199.8 150.282 mo
205.8 156.282 li
f
.5 lw
[] 0 dsh
199.8 156.282 mo
205.8 150.282 li
199.8 150.282 mo
205.8 156.282 li
@
grestore
gsave
236.75 141.067 mo
243.25 141.067 li
243.25 134.567 li
236.75 134.567 li
cp
clp
237 140.817 mo
243 134.817 li
237 134.817 mo
243 140.817 li
f
.5 lw
[] 0 dsh
237 140.817 mo
243 134.817 li
237 134.817 mo
243 140.817 li
@
grestore
gsave
273.95 122.637 mo
280.45 122.637 li
280.45 116.137 li
273.95 116.137 li
cp
clp
274.2 122.387 mo
280.2 116.387 li
274.2 116.387 mo
280.2 122.387 li
f
.5 lw
[] 0 dsh
274.2 122.387 mo
280.2 116.387 li
274.2 116.387 mo
280.2 122.387 li
@
grestore
gsave
311.15 107.715 mo
317.65 107.715 li
317.65 101.215 li
311.15 101.215 li
cp
clp
311.4 107.465 mo
317.4 101.465 li
311.4 101.465 mo
317.4 107.465 li
f
.5 lw
[] 0 dsh
311.4 107.465 mo
317.4 101.465 li
311.4 101.465 mo
317.4 107.465 li
@
grestore
gsave
348.35 96.3635 mo
354.85 96.3635 li
354.85 89.8635 li
348.35 89.8635 li
cp
clp
348.6 96.1135 mo
354.6 90.1135 li
348.6 90.1135 mo
354.6 96.1135 li
f
.5 lw
[] 0 dsh
348.6 96.1135 mo
354.6 90.1135 li
348.6 90.1135 mo
354.6 96.1135 li
@
grestore
gsave
385.55 84.2788 mo
392.05 84.2788 li
392.05 77.7788 li
385.55 77.7788 li
cp
clp
385.8 84.0288 mo
391.8 78.0288 li
385.8 78.0288 mo
391.8 84.0288 li
f
.5 lw
[] 0 dsh
385.8 84.0288 mo
391.8 78.0288 li
385.8 78.0288 mo
391.8 84.0288 li
@
grestore
grestore
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 235.26 mo
91.2 218.966 li
128.4 199.229 li
165.6 177.228 li
202.8 159.914 li
240 143.429 li
277.2 123.118 li
314.4 110.587 li
351.6 102.328 li
388.8 94.5165 li
.94522 .242222 1 .15729 cmyk
@
gsave
50.75 238.51 mo
57.25 238.51 li
57.25 232.01 li
50.75 232.01 li
cp
clp
54 238.26 mo
54.7956 238.26 55.5587 237.944 56.1213 237.381 cv
56.6839 236.819 57 236.056 57 235.26 cv
57 234.464 56.6839 233.701 56.1213 233.139 cv
55.5587 232.576 54.7956 232.26 54 232.26 cv
53.2044 232.26 52.4413 232.576 51.8787 233.139 cv
51.3161 233.701 51 234.464 51 235.26 cv
51 236.056 51.3161 236.819 51.8787 237.381 cv
52.4413 237.944 53.2044 238.26 54 238.26 cv
cp
f
.5 lw
0 lc
54 238.26 mo
54.7956 238.26 55.5587 237.944 56.1213 237.381 cv
56.6839 236.819 57 236.056 57 235.26 cv
57 234.464 56.6839 233.701 56.1213 233.139 cv
55.5587 232.576 54.7956 232.26 54 232.26 cv
53.2044 232.26 52.4413 232.576 51.8787 233.139 cv
51.3161 233.701 51 234.464 51 235.26 cv
51 236.056 51.3161 236.819 51.8787 237.381 cv
52.4413 237.944 53.2044 238.26 54 238.26 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
87.95 222.216 mo
94.45 222.216 li
94.45 215.716 li
87.95 215.716 li
cp
clp
91.2 221.966 mo
91.9956 221.966 92.7587 221.65 93.3213 221.088 cv
93.8839 220.525 94.2 219.762 94.2 218.966 cv
94.2 218.171 93.8839 217.408 93.3213 216.845 cv
92.7587 216.283 91.9956 215.966 91.2 215.966 cv
90.4044 215.966 89.6413 216.283 89.0787 216.845 cv
88.5161 217.408 88.2 218.171 88.2 218.966 cv
88.2 219.762 88.5161 220.525 89.0787 221.088 cv
89.6413 221.65 90.4044 221.966 91.2 221.966 cv
cp
f
.5 lw
0 lc
91.2 221.966 mo
91.9956 221.966 92.7587 221.65 93.3213 221.088 cv
93.8839 220.525 94.2 219.762 94.2 218.966 cv
94.2 218.171 93.8839 217.408 93.3213 216.845 cv
92.7587 216.283 91.9956 215.966 91.2 215.966 cv
90.4044 215.966 89.6413 216.283 89.0787 216.845 cv
88.5161 217.408 88.2 218.171 88.2 218.966 cv
88.2 219.762 88.5161 220.525 89.0787 221.088 cv
89.6413 221.65 90.4044 221.966 91.2 221.966 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
125.15 202.479 mo
131.65 202.479 li
131.65 195.979 li
125.15 195.979 li
cp
clp
128.4 202.229 mo
129.196 202.229 129.959 201.913 130.521 201.35 cv
131.084 200.788 131.4 200.025 131.4 199.229 cv
131.4 198.434 131.084 197.67 130.521 197.108 cv
129.959 196.545 129.196 196.229 128.4 196.229 cv
127.604 196.229 126.841 196.545 126.279 197.108 cv
125.716 197.67 125.4 198.434 125.4 199.229 cv
125.4 200.025 125.716 200.788 126.279 201.35 cv
126.841 201.913 127.604 202.229 128.4 202.229 cv
cp
f
.5 lw
0 lc
128.4 202.229 mo
129.196 202.229 129.959 201.913 130.521 201.35 cv
131.084 200.788 131.4 200.025 131.4 199.229 cv
131.4 198.434 131.084 197.67 130.521 197.108 cv
129.959 196.545 129.196 196.229 128.4 196.229 cv
127.604 196.229 126.841 196.545 126.279 197.108 cv
125.716 197.67 125.4 198.434 125.4 199.229 cv
125.4 200.025 125.716 200.788 126.279 201.35 cv
126.841 201.913 127.604 202.229 128.4 202.229 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
162.35 180.478 mo
168.85 180.478 li
168.85 173.978 li
162.35 173.978 li
cp
clp
165.6 180.228 mo
166.396 180.228 167.159 179.912 167.721 179.349 cv
168.284 178.787 168.6 178.024 168.6 177.228 cv
168.6 176.432 168.284 175.669 167.721 175.107 cv
167.159 174.544 166.396 174.228 165.6 174.228 cv
164.804 174.228 164.041 174.544 163.479 175.107 cv
162.916 175.669 162.6 176.432 162.6 177.228 cv
162.6 178.024 162.916 178.787 163.479 179.349 cv
164.041 179.912 164.804 180.228 165.6 180.228 cv
cp
f
.5 lw
0 lc
165.6 180.228 mo
166.396 180.228 167.159 179.912 167.721 179.349 cv
168.284 178.787 168.6 178.024 168.6 177.228 cv
168.6 176.432 168.284 175.669 167.721 175.107 cv
167.159 174.544 166.396 174.228 165.6 174.228 cv
164.804 174.228 164.041 174.544 163.479 175.107 cv
162.916 175.669 162.6 176.432 162.6 177.228 cv
162.6 178.024 162.916 178.787 163.479 179.349 cv
164.041 179.912 164.804 180.228 165.6 180.228 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
199.55 163.164 mo
206.05 163.164 li
206.05 156.664 li
199.55 156.664 li
cp
clp
202.8 162.914 mo
203.596 162.914 204.359 162.598 204.921 162.035 cv
205.484 161.473 205.8 160.71 205.8 159.914 cv
205.8 159.118 205.484 158.355 204.921 157.793 cv
204.359 157.23 203.596 156.914 202.8 156.914 cv
202.004 156.914 201.241 157.23 200.679 157.793 cv
200.116 158.355 199.8 159.118 199.8 159.914 cv
199.8 160.71 200.116 161.473 200.679 162.035 cv
201.241 162.598 202.004 162.914 202.8 162.914 cv
cp
f
.5 lw
0 lc
202.8 162.914 mo
203.596 162.914 204.359 162.598 204.921 162.035 cv
205.484 161.473 205.8 160.71 205.8 159.914 cv
205.8 159.118 205.484 158.355 204.921 157.793 cv
204.359 157.23 203.596 156.914 202.8 156.914 cv
202.004 156.914 201.241 157.23 200.679 157.793 cv
200.116 158.355 199.8 159.118 199.8 159.914 cv
199.8 160.71 200.116 161.473 200.679 162.035 cv
201.241 162.598 202.004 162.914 202.8 162.914 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
236.75 146.679 mo
243.25 146.679 li
243.25 140.179 li
236.75 140.179 li
cp
clp
240 146.429 mo
240.796 146.429 241.559 146.113 242.121 145.55 cv
242.684 144.988 243 144.225 243 143.429 cv
243 142.634 242.684 141.87 242.121 141.308 cv
241.559 140.745 240.796 140.429 240 140.429 cv
239.204 140.429 238.441 140.745 237.879 141.308 cv
237.316 141.87 237 142.634 237 143.429 cv
237 144.225 237.316 144.988 237.879 145.55 cv
238.441 146.113 239.204 146.429 240 146.429 cv
cp
f
.5 lw
0 lc
240 146.429 mo
240.796 146.429 241.559 146.113 242.121 145.55 cv
242.684 144.988 243 144.225 243 143.429 cv
243 142.634 242.684 141.87 242.121 141.308 cv
241.559 140.745 240.796 140.429 240 140.429 cv
239.204 140.429 238.441 140.745 237.879 141.308 cv
237.316 141.87 237 142.634 237 143.429 cv
237 144.225 237.316 144.988 237.879 145.55 cv
238.441 146.113 239.204 146.429 240 146.429 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
273.95 126.368 mo
280.45 126.368 li
280.45 119.868 li
273.95 119.868 li
cp
clp
277.2 126.118 mo
277.996 126.118 278.759 125.802 279.321 125.239 cv
279.884 124.677 280.2 123.914 280.2 123.118 cv
280.2 122.322 279.884 121.559 279.321 120.997 cv
278.759 120.434 277.996 120.118 277.2 120.118 cv
276.404 120.118 275.641 120.434 275.079 120.997 cv
274.516 121.559 274.2 122.322 274.2 123.118 cv
274.2 123.914 274.516 124.677 275.079 125.239 cv
275.641 125.802 276.404 126.118 277.2 126.118 cv
cp
f
.5 lw
0 lc
277.2 126.118 mo
277.996 126.118 278.759 125.802 279.321 125.239 cv
279.884 124.677 280.2 123.914 280.2 123.118 cv
280.2 122.322 279.884 121.559 279.321 120.997 cv
278.759 120.434 277.996 120.118 277.2 120.118 cv
276.404 120.118 275.641 120.434 275.079 120.997 cv
274.516 121.559 274.2 122.322 274.2 123.118 cv
274.2 123.914 274.516 124.677 275.079 125.239 cv
275.641 125.802 276.404 126.118 277.2 126.118 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
311.15 113.837 mo
317.65 113.837 li
317.65 107.337 li
311.15 107.337 li
cp
clp
314.4 113.587 mo
315.196 113.587 315.959 113.271 316.521 112.708 cv
317.084 112.146 317.4 111.382 317.4 110.587 cv
317.4 109.791 317.084 109.028 316.521 108.466 cv
315.959 107.903 315.196 107.587 314.4 107.587 cv
313.604 107.587 312.841 107.903 312.279 108.466 cv
311.716 109.028 311.4 109.791 311.4 110.587 cv
311.4 111.382 311.716 112.146 312.279 112.708 cv
312.841 113.271 313.604 113.587 314.4 113.587 cv
cp
f
.5 lw
0 lc
314.4 113.587 mo
315.196 113.587 315.959 113.271 316.521 112.708 cv
317.084 112.146 317.4 111.382 317.4 110.587 cv
317.4 109.791 317.084 109.028 316.521 108.466 cv
315.959 107.903 315.196 107.587 314.4 107.587 cv
313.604 107.587 312.841 107.903 312.279 108.466 cv
311.716 109.028 311.4 109.791 311.4 110.587 cv
311.4 111.382 311.716 112.146 312.279 112.708 cv
312.841 113.271 313.604 113.587 314.4 113.587 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
348.35 105.578 mo
354.85 105.578 li
354.85 99.0785 li
348.35 99.0785 li
cp
clp
351.6 105.328 mo
352.396 105.328 353.159 105.012 353.721 104.45 cv
354.284 103.887 354.6 103.124 354.6 102.328 cv
354.6 101.533 354.284 100.77 353.721 100.207 cv
353.159 99.6446 352.396 99.3285 351.6 99.3285 cv
350.804 99.3285 350.041 99.6446 349.479 100.207 cv
348.916 100.77 348.6 101.533 348.6 102.328 cv
348.6 103.124 348.916 103.887 349.479 104.45 cv
350.041 105.012 350.804 105.328 351.6 105.328 cv
cp
f
.5 lw
0 lc
351.6 105.328 mo
352.396 105.328 353.159 105.012 353.721 104.45 cv
354.284 103.887 354.6 103.124 354.6 102.328 cv
354.6 101.533 354.284 100.77 353.721 100.207 cv
353.159 99.6446 352.396 99.3285 351.6 99.3285 cv
350.804 99.3285 350.041 99.6446 349.479 100.207 cv
348.916 100.77 348.6 101.533 348.6 102.328 cv
348.6 103.124 348.916 103.887 349.479 104.45 cv
350.041 105.012 350.804 105.328 351.6 105.328 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
385.55 97.7665 mo
392.05 97.7665 li
392.05 91.2665 li
385.55 91.2665 li
cp
clp
388.8 97.5165 mo
389.596 97.5165 390.359 97.2004 390.921 96.6378 cv
391.484 96.0752 391.8 95.3121 391.8 94.5165 cv
391.8 93.7209 391.484 92.9577 390.921 92.3951 cv
390.359 91.8326 389.596 91.5165 388.8 91.5165 cv
388.004 91.5165 387.241 91.8326 386.679 92.3951 cv
386.116 92.9577 385.8 93.7209 385.8 94.5165 cv
385.8 95.3121 386.116 96.0752 386.679 96.6378 cv
387.241 97.2004 388.004 97.5165 388.8 97.5165 cv
cp
f
.5 lw
0 lc
388.8 97.5165 mo
389.596 97.5165 390.359 97.2004 390.921 96.6378 cv
391.484 96.0752 391.8 95.3121 391.8 94.5165 cv
391.8 93.7209 391.484 92.9577 390.921 92.3951 cv
390.359 91.8326 389.596 91.5165 388.8 91.5165 cv
388.004 91.5165 387.241 91.8326 386.679 92.3951 cv
386.116 92.9577 385.8 93.7209 385.8 94.5165 cv
385.8 95.3121 386.116 96.0752 386.679 96.6378 cv
387.241 97.2004 388.004 97.5165 388.8 97.5165 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[3 5 1 5 ] 0 dsh
true sadj
54 233.57 mo
91.2 211.027 li
128.4 195.467 li
165.6 179.237 li
202.8 162.943 li
240 146.713 li
277.2 127.072 li
314.4 116.103 li
351.6 110.14 li
388.8 96.7166 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
51.35 235.32 mo
56.65 235.32 li
56.65 230.32 li
51.35 230.32 li
cp
clp
54 233.57 mo
54 230.57 li
54 233.57 mo
51.6 235.07 li
54 233.57 mo
56.4 235.07 li
f
.5 lw
[] 0 dsh
54 233.57 mo
54 230.57 li
54 233.57 mo
51.6 235.07 li
54 233.57 mo
56.4 235.07 li
@
grestore
gsave
88.55 212.777 mo
93.85 212.777 li
93.85 207.777 li
88.55 207.777 li
cp
clp
91.2 211.027 mo
91.2 208.027 li
91.2 211.027 mo
88.8 212.527 li
91.2 211.027 mo
93.6 212.527 li
f
.5 lw
[] 0 dsh
91.2 211.027 mo
91.2 208.027 li
91.2 211.027 mo
88.8 212.527 li
91.2 211.027 mo
93.6 212.527 li
@
grestore
gsave
125.75 197.217 mo
131.05 197.217 li
131.05 192.217 li
125.75 192.217 li
cp
clp
128.4 195.467 mo
128.4 192.467 li
128.4 195.467 mo
126 196.967 li
128.4 195.467 mo
130.8 196.967 li
f
.5 lw
[] 0 dsh
128.4 195.467 mo
128.4 192.467 li
128.4 195.467 mo
126 196.967 li
128.4 195.467 mo
130.8 196.967 li
@
grestore
gsave
162.95 180.987 mo
168.25 180.987 li
168.25 175.987 li
162.95 175.987 li
cp
clp
165.6 179.237 mo
165.6 176.237 li
165.6 179.237 mo
163.2 180.737 li
165.6 179.237 mo
168 180.737 li
f
.5 lw
[] 0 dsh
165.6 179.237 mo
165.6 176.237 li
165.6 179.237 mo
163.2 180.737 li
165.6 179.237 mo
168 180.737 li
@
grestore
gsave
200.15 164.693 mo
205.45 164.693 li
205.45 159.693 li
200.15 159.693 li
cp
clp
202.8 162.943 mo
202.8 159.943 li
202.8 162.943 mo
200.4 164.443 li
202.8 162.943 mo
205.2 164.443 li
f
.5 lw
[] 0 dsh
202.8 162.943 mo
202.8 159.943 li
202.8 162.943 mo
200.4 164.443 li
202.8 162.943 mo
205.2 164.443 li
@
grestore
gsave
237.35 148.463 mo
242.65 148.463 li
242.65 143.463 li
237.35 143.463 li
cp
clp
240 146.713 mo
240 143.713 li
240 146.713 mo
237.6 148.213 li
240 146.713 mo
242.4 148.213 li
f
.5 lw
[] 0 dsh
240 146.713 mo
240 143.713 li
240 146.713 mo
237.6 148.213 li
240 146.713 mo
242.4 148.213 li
@
grestore
gsave
274.55 128.822 mo
279.85 128.822 li
279.85 123.822 li
274.55 123.822 li
cp
clp
277.2 127.072 mo
277.2 124.072 li
277.2 127.072 mo
274.8 128.572 li
277.2 127.072 mo
279.6 128.572 li
f
.5 lw
[] 0 dsh
277.2 127.072 mo
277.2 124.072 li
277.2 127.072 mo
274.8 128.572 li
277.2 127.072 mo
279.6 128.572 li
@
grestore
gsave
311.75 117.853 mo
317.05 117.853 li
317.05 112.853 li
311.75 112.853 li
cp
clp
314.4 116.103 mo
314.4 113.103 li
314.4 116.103 mo
312 117.603 li
314.4 116.103 mo
316.8 117.603 li
f
.5 lw
[] 0 dsh
314.4 116.103 mo
314.4 113.103 li
314.4 116.103 mo
312 117.603 li
314.4 116.103 mo
316.8 117.603 li
@
grestore
gsave
348.95 111.89 mo
354.25 111.89 li
354.25 106.89 li
348.95 106.89 li
cp
clp
351.6 110.14 mo
351.6 107.14 li
351.6 110.14 mo
349.2 111.64 li
351.6 110.14 mo
354 111.64 li
f
.5 lw
[] 0 dsh
351.6 110.14 mo
351.6 107.14 li
351.6 110.14 mo
349.2 111.64 li
351.6 110.14 mo
354 111.64 li
@
grestore
gsave
386.15 98.4666 mo
391.45 98.4666 li
391.45 93.4666 li
386.15 93.4666 li
cp
clp
388.8 96.7166 mo
388.8 93.7166 li
388.8 96.7166 mo
386.4 98.2166 li
388.8 96.7166 mo
391.2 98.2166 li
f
.5 lw
[] 0 dsh
388.8 96.7166 mo
388.8 93.7166 li
388.8 96.7166 mo
386.4 98.2166 li
388.8 96.7166 mo
391.2 98.2166 li
@
grestore
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
54 28.8 mo
388.8 28.8 li
1 /0 /CSD get_res sepcs
1 sep
@
388.8 252 mo
388.8 28.8 li
@
54 252 mo
388.8 252 li
@
54 252 mo
54 28.8 li
@
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
54 252 mo
54 28.8 li
@
grestore
54 252 mo
54 248 li
f
.5 lw
0 lc
1 lj
54 252 mo
54 248 li
@
54 28.8 mo
54 32.8 li
f
54 28.8 mo
54 32.8 li
@
52.0603 262.764 mo
53.6703 262.764 li
53.6703 257.204 li
51.9203 257.554 li
51.9203 256.654 li
53.6603 256.304 li
54.6503 256.304 li
54.6503 262.764 li
56.2603 262.764 li
56.2603 263.594 li
52.0603 263.594 li
52.0603 262.764 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
91.2 252 mo
91.2 28.8 li
@
grestore
91.2 252 mo
91.2 248 li
f
91.2 252 mo
91.2 248 li
@
91.2 28.8 mo
91.2 32.8 li
f
91.2 28.8 mo
91.2 32.8 li
@
89.9403 262.764 mo
93.3803 262.764 li
93.3803 263.594 li
88.7503 263.594 li
88.7503 262.764 li
89.1203 262.384 89.6303 261.864 90.2803 261.204 cv
90.9203 260.554 91.3303 260.134 91.5003 259.944 cv
91.8203 259.594 92.0403 259.294 92.1603 259.044 cv
92.2803 258.804 92.3503 258.554 92.3503 258.314 cv
92.3503 257.934 92.2103 257.614 91.9403 257.374 cv
91.6703 257.134 91.3203 257.004 90.8803 257.004 cv
90.5703 257.004 90.2403 257.064 89.9003 257.164 cv
89.5603 257.274 89.1903 257.434 88.8003 257.654 cv
88.8003 256.654 li
89.2003 256.494 89.5703 256.374 89.9103 256.294 cv
90.2503 256.214 90.5703 256.174 90.8603 256.174 cv
91.6103 256.174 92.2103 256.364 92.6603 256.744 cv
93.1103 257.124 93.3403 257.624 93.3403 258.254 cv
93.3403 258.554 93.2803 258.844 93.1703 259.104 cv
93.0603 259.374 92.8603 259.694 92.5603 260.054 cv
92.4803 260.154 92.2203 260.424 91.7803 260.874 cv
91.3403 261.324 90.7303 261.954 89.9403 262.764 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
128.4 252 mo
128.4 28.8 li
@
grestore
128.4 252 mo
128.4 248 li
f
128.4 252 mo
128.4 248 li
@
128.4 28.8 mo
128.4 32.8 li
f
128.4 28.8 mo
128.4 32.8 li
@
129.28 259.664 mo
129.75 259.764 130.12 259.974 130.38 260.294 cv
130.64 260.614 130.78 261.014 130.78 261.474 cv
130.78 262.194 130.53 262.754 130.04 263.144 cv
129.54 263.534 128.84 263.724 127.93 263.724 cv
127.62 263.724 127.3 263.694 126.98 263.634 cv
126.66 263.584 126.32 263.494 125.98 263.374 cv
125.98 262.424 li
126.25 262.584 126.55 262.704 126.88 262.784 cv
127.2 262.864 127.54 262.904 127.9 262.904 cv
128.52 262.904 128.99 262.784 129.31 262.544 cv
129.63 262.304 129.8 261.944 129.8 261.474 cv
129.8 261.054 129.65 260.714 129.35 260.474 cv
129.05 260.234 128.63 260.104 128.09 260.104 cv
127.24 260.104 li
127.24 259.294 li
128.13 259.294 li
128.61 259.294 128.98 259.204 129.24 259.004 cv
129.5 258.814 129.63 258.534 129.63 258.164 cv
129.63 257.794 129.49 257.504 129.23 257.304 cv
128.96 257.104 128.58 257.004 128.09 257.004 cv
127.82 257.004 127.53 257.034 127.22 257.094 cv
126.91 257.154 126.57 257.244 126.2 257.364 cv
126.2 256.484 li
126.57 256.384 126.92 256.304 127.25 256.254 cv
127.57 256.204 127.88 256.174 128.18 256.174 cv
128.92 256.174 129.51 256.344 129.95 256.684 cv
130.39 257.024 130.61 257.484 130.61 258.064 cv
130.61 258.464 130.49 258.804 130.26 259.084 cv
130.03 259.364 129.7 259.564 129.28 259.664 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
165.6 252 mo
165.6 28.8 li
@
grestore
165.6 252 mo
165.6 248 li
f
165.6 252 mo
165.6 248 li
@
165.6 28.8 mo
165.6 32.8 li
f
165.6 28.8 mo
165.6 32.8 li
@
166.2 257.164 mo
163.71 261.054 li
166.2 261.054 li
166.2 257.164 li
165.94 256.304 mo
167.18 256.304 li
167.18 261.054 li
168.22 261.054 li
168.22 261.874 li
167.18 261.874 li
167.18 263.594 li
166.2 263.594 li
166.2 261.874 li
162.91 261.874 li
162.91 260.924 li
165.94 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
202.8 252 mo
202.8 28.8 li
@
grestore
202.8 252 mo
202.8 248 li
f
202.8 252 mo
202.8 248 li
@
202.8 28.8 mo
202.8 32.8 li
f
202.8 28.8 mo
202.8 32.8 li
@
200.7 256.304 mo
204.57 256.304 li
204.57 257.134 li
201.6 257.134 li
201.6 258.924 li
201.74 258.874 201.89 258.834 202.03 258.814 cv
202.17 258.794 202.32 258.774 202.46 258.774 cv
203.27 258.774 203.91 259.004 204.39 259.444 cv
204.87 259.894 205.11 260.494 205.11 261.254 cv
205.11 262.044 204.86 262.654 204.37 263.084 cv
203.88 263.514 203.19 263.724 202.31 263.724 cv
202 263.724 201.69 263.694 201.37 263.654 cv
201.05 263.604 200.73 263.534 200.39 263.424 cv
200.39 262.434 li
200.68 262.594 200.98 262.714 201.3 262.794 cv
201.61 262.874 201.94 262.904 202.29 262.904 cv
202.85 262.904 203.3 262.764 203.63 262.464 cv
203.95 262.164 204.12 261.764 204.12 261.254 cv
204.12 260.754 203.95 260.354 203.63 260.054 cv
203.3 259.754 202.85 259.604 202.29 259.604 cv
202.03 259.604 201.76 259.634 201.5 259.694 cv
201.24 259.754 200.97 259.844 200.7 259.964 cv
200.7 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
240 252 mo
240 28.8 li
@
grestore
240 252 mo
240 248 li
f
240 252 mo
240 248 li
@
240 28.8 mo
240 32.8 li
f
240 28.8 mo
240 32.8 li
@
240.12 259.554 mo
239.68 259.554 239.33 259.714 239.07 260.014 cv
238.81 260.314 238.68 260.734 238.68 261.254 cv
238.68 261.784 238.81 262.204 239.07 262.504 cv
239.33 262.804 239.68 262.954 240.12 262.954 cv
240.56 262.954 240.91 262.804 241.17 262.504 cv
241.43 262.204 241.56 261.784 241.56 261.254 cv
241.56 260.734 241.43 260.314 241.17 260.014 cv
240.91 259.714 240.56 259.554 240.12 259.554 cv
242.08 256.464 mo
242.08 257.364 li
241.83 257.244 241.58 257.154 241.33 257.094 cv
241.07 257.034 240.82 257.004 240.58 257.004 cv
239.92 257.004 239.42 257.224 239.08 257.664 cv
238.74 258.104 238.54 258.774 238.5 259.654 cv
238.69 259.374 238.93 259.154 239.22 259.004 cv
239.51 258.854 239.83 258.774 240.18 258.774 cv
240.91 258.774 241.49 259.004 241.91 259.444 cv
242.33 259.884 242.55 260.494 242.55 261.254 cv
242.55 262.004 242.32 262.604 241.88 263.054 cv
241.44 263.504 240.85 263.724 240.12 263.724 cv
239.28 263.724 238.63 263.404 238.19 262.764 cv
237.74 262.124 237.52 261.184 237.52 259.954 cv
237.52 258.804 237.79 257.884 238.34 257.204 cv
238.88 256.524 239.62 256.174 240.54 256.174 cv
240.78 256.174 241.03 256.204 241.29 256.244 cv
241.54 256.294 241.8 256.364 242.08 256.464 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
277.2 252 mo
277.2 28.8 li
@
grestore
277.2 252 mo
277.2 248 li
f
277.2 252 mo
277.2 248 li
@
277.2 28.8 mo
277.2 32.8 li
f
277.2 28.8 mo
277.2 32.8 li
@
274.84 256.304 mo
279.53 256.304 li
279.53 256.724 li
276.88 263.594 li
275.85 263.594 li
278.34 257.134 li
274.84 257.134 li
274.84 256.304 li
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
314.4 252 mo
314.4 28.8 li
@
grestore
314.4 252 mo
314.4 248 li
f
314.4 252 mo
314.4 248 li
@
314.4 28.8 mo
314.4 32.8 li
f
314.4 28.8 mo
314.4 32.8 li
@
314.4 260.134 mo
313.93 260.134 313.56 260.264 313.29 260.514 cv
313.02 260.764 312.89 261.104 312.89 261.544 cv
312.89 261.984 313.02 262.334 313.29 262.584 cv
313.56 262.834 313.93 262.954 314.4 262.954 cv
314.86 262.954 315.23 262.834 315.5 262.574 cv
315.77 262.324 315.91 261.984 315.91 261.544 cv
315.91 261.104 315.77 260.764 315.51 260.514 cv
315.24 260.264 314.87 260.134 314.4 260.134 cv
313.41 259.714 mo
312.99 259.614 312.66 259.414 312.42 259.124 cv
312.18 258.834 312.07 258.484 312.07 258.064 cv
312.07 257.484 312.27 257.024 312.69 256.684 cv
313.1 256.344 313.67 256.174 314.4 256.174 cv
315.12 256.174 315.69 256.344 316.11 256.684 cv
316.52 257.024 316.73 257.484 316.73 258.064 cv
316.73 258.484 316.61 258.834 316.37 259.124 cv
316.13 259.414 315.81 259.614 315.39 259.714 cv
315.86 259.824 316.23 260.044 316.5 260.364 cv
316.76 260.684 316.9 261.084 316.9 261.544 cv
316.9 262.254 316.68 262.794 316.25 263.164 cv
315.81 263.544 315.2 263.724 314.4 263.724 cv
313.59 263.724 312.97 263.544 312.54 263.164 cv
312.11 262.794 311.9 262.254 311.9 261.544 cv
311.9 261.084 312.03 260.684 312.3 260.364 cv
312.56 260.044 312.93 259.824 313.41 259.714 cv
313.05 258.154 mo
313.05 258.534 313.16 258.834 313.4 259.044 cv
313.64 259.254 313.97 259.354 314.4 259.354 cv
314.82 259.354 315.15 259.254 315.39 259.044 cv
315.63 258.834 315.75 258.534 315.75 258.154 cv
315.75 257.774 315.63 257.484 315.39 257.274 cv
315.15 257.064 314.82 256.954 314.4 256.954 cv
313.97 256.954 313.64 257.064 313.4 257.274 cv
313.16 257.484 313.05 257.774 313.05 258.154 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
351.6 252 mo
351.6 28.8 li
@
grestore
351.6 252 mo
351.6 248 li
f
351.6 252 mo
351.6 248 li
@
351.6 28.8 mo
351.6 32.8 li
f
351.6 28.8 mo
351.6 32.8 li
@
349.52 263.444 mo
349.52 262.544 li
349.76 262.664 350.01 262.754 350.27 262.814 cv
350.52 262.874 350.77 262.904 351.02 262.904 cv
351.66 262.904 352.16 262.694 352.5 262.254 cv
352.84 261.814 353.04 261.154 353.1 260.254 cv
352.9 260.534 352.66 260.754 352.38 260.904 cv
352.09 261.054 351.77 261.124 351.42 261.124 cv
350.68 261.124 350.1 260.904 349.68 260.464 cv
349.26 260.024 349.05 259.424 349.05 258.654 cv
349.05 257.914 349.27 257.314 349.71 256.854 cv
350.15 256.404 350.74 256.174 351.48 256.174 cv
352.32 256.174 352.97 256.504 353.41 257.144 cv
353.85 257.794 354.08 258.734 354.08 259.954 cv
354.08 261.114 353.8 262.024 353.26 262.704 cv
352.71 263.384 351.98 263.724 351.06 263.724 cv
350.81 263.724 350.56 263.694 350.31 263.654 cv
350.05 263.614 349.79 263.544 349.52 263.444 cv
351.48 260.354 mo
351.92 260.354 352.27 260.204 352.53 259.904 cv
352.79 259.604 352.92 259.184 352.92 258.654 cv
352.92 258.134 352.79 257.714 352.53 257.414 cv
352.27 257.114 351.92 256.954 351.48 256.954 cv
351.04 256.954 350.69 257.114 350.43 257.414 cv
350.17 257.714 350.04 258.134 350.04 258.654 cv
350.04 259.184 350.17 259.604 350.43 259.904 cv
350.69 260.204 351.04 260.354 351.48 260.354 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
388.8 252 mo
388.8 28.8 li
@
grestore
388.8 252 mo
388.8 248 li
f
388.8 252 mo
388.8 248 li
@
388.8 28.8 mo
388.8 32.8 li
f
388.8 28.8 mo
388.8 32.8 li
@
383.681 262.764 mo
385.291 262.764 li
385.291 257.204 li
383.541 257.554 li
383.541 256.654 li
385.281 256.304 li
386.271 256.304 li
386.271 262.764 li
387.881 262.764 li
387.881 263.594 li
383.681 263.594 li
383.681 262.764 li
f
391.981 256.954 mo
391.471 256.954 391.091 257.204 390.831 257.704 cv
390.571 258.204 390.451 258.954 390.451 259.954 cv
390.451 260.954 390.571 261.704 390.831 262.204 cv
391.091 262.704 391.471 262.954 391.981 262.954 cv
392.491 262.954 392.871 262.704 393.131 262.204 cv
393.381 261.704 393.511 260.954 393.511 259.954 cv
393.511 258.954 393.381 258.204 393.131 257.704 cv
392.871 257.204 392.491 256.954 391.981 256.954 cv
391.981 256.174 mo
392.791 256.174 393.411 256.504 393.851 257.144 cv
394.281 257.794 394.501 258.734 394.501 259.954 cv
394.501 261.184 394.281 262.124 393.851 262.764 cv
393.411 263.404 392.791 263.724 391.981 263.724 cv
391.161 263.724 390.531 263.404 390.101 262.764 cv
389.671 262.124 389.461 261.184 389.461 259.954 cv
389.461 258.734 389.671 257.794 390.101 257.144 cv
390.531 256.504 391.161 256.174 391.981 256.174 cv
f
138.244 273.866 mo
136.824 273.866 li
136.414 275.496 li
137.844 275.496 li
138.244 273.866 li
137.514 271.086 mo
137.004 273.116 li
138.434 273.116 li
138.944 271.086 li
139.724 271.086 li
139.224 273.116 li
140.744 273.116 li
140.744 273.866 li
139.034 273.866 li
138.634 275.496 li
140.184 275.496 li
140.184 276.246 li
138.444 276.246 li
137.934 278.266 li
137.154 278.266 li
137.654 276.246 li
136.224 276.246 li
135.724 278.266 li
134.934 278.266 li
135.444 276.246 li
133.904 276.246 li
133.904 275.496 li
135.624 275.496 li
136.034 273.866 li
134.464 273.866 li
134.464 273.116 li
136.224 273.116 li
136.724 271.086 li
137.514 271.086 li
f
147.754 273.426 mo
147.274 273.426 146.894 273.616 146.614 273.996 cv
146.334 274.376 146.194 274.886 146.194 275.536 cv
146.194 276.196 146.324 276.706 146.604 277.086 cv
146.884 277.466 147.264 277.646 147.754 277.646 cv
148.234 277.646 148.614 277.466 148.894 277.086 cv
149.174 276.706 149.314 276.196 149.314 275.536 cv
149.314 274.896 149.174 274.376 148.894 273.996 cv
148.614 273.616 148.234 273.426 147.754 273.426 cv
147.754 272.666 mo
148.534 272.666 149.144 272.926 149.594 273.426 cv
150.034 273.936 150.264 274.636 150.264 275.536 cv
150.264 276.436 150.034 277.136 149.594 277.636 cv
149.144 278.146 148.534 278.396 147.754 278.396 cv
146.964 278.396 146.344 278.146 145.904 277.636 cv
145.464 277.136 145.244 276.436 145.244 275.536 cv
145.244 274.636 145.464 273.936 145.904 273.426 cv
146.344 272.926 146.964 272.666 147.754 272.666 cv
f
154.524 270.666 mo
154.524 271.416 li
153.664 271.416 li
153.344 271.416 153.114 271.486 152.994 271.616 cv
152.864 271.746 152.804 271.976 152.804 272.316 cv
152.804 272.796 li
154.284 272.796 li
154.284 273.496 li
152.804 273.496 li
152.804 278.266 li
151.904 278.266 li
151.904 273.496 li
151.044 273.496 li
151.044 272.796 li
151.904 272.796 li
151.904 272.416 li
151.904 271.816 152.044 271.366 152.324 271.086 cv
152.604 270.806 153.054 270.666 153.674 270.666 cv
154.524 270.666 li
f
161.954 274.846 mo
162.164 274.926 162.374 275.076 162.574 275.306 cv
162.774 275.546 162.974 275.866 163.174 276.276 cv
164.174 278.266 li
163.114 278.266 li
162.184 276.396 li
161.944 275.916 161.704 275.586 161.484 275.426 cv
161.254 275.266 160.944 275.186 160.554 275.186 cv
159.484 275.186 li
159.484 278.266 li
158.494 278.266 li
158.494 270.976 li
160.724 270.976 li
161.554 270.976 162.174 271.156 162.584 271.496 cv
162.994 271.846 163.204 272.376 163.204 273.076 cv
163.204 273.536 163.094 273.926 162.884 274.226 cv
162.664 274.526 162.354 274.736 161.954 274.846 cv
159.484 271.786 mo
159.484 274.376 li
160.724 274.376 li
161.194 274.376 161.554 274.266 161.794 274.046 cv
162.034 273.826 162.164 273.506 162.164 273.076 cv
162.164 272.656 162.034 272.336 161.794 272.116 cv
161.554 271.896 161.194 271.786 160.724 271.786 cv
159.484 271.786 li
f
170.084 275.306 mo
170.084 275.746 li
165.954 275.746 li
165.994 276.366 166.174 276.846 166.514 277.166 cv
166.844 277.486 167.304 277.646 167.904 277.646 cv
168.244 277.646 168.584 277.606 168.904 277.526 cv
169.224 277.446 169.554 277.316 169.874 277.136 cv
169.874 277.986 li
169.554 278.126 169.224 278.236 168.884 278.296 cv
168.544 278.356 168.194 278.396 167.854 278.396 cv
166.974 278.396 166.284 278.146 165.774 277.646 cv
165.264 277.146 165.014 276.456 165.014 275.586 cv
165.014 274.696 165.254 273.986 165.734 273.456 cv
166.214 272.936 166.874 272.666 167.694 272.666 cv
168.434 272.666 169.014 272.906 169.444 273.376 cv
169.864 273.856 170.084 274.496 170.084 275.306 cv
169.184 275.046 mo
169.174 274.556 169.034 274.166 168.774 273.866 cv
168.504 273.576 168.144 273.426 167.704 273.426 cv
167.204 273.426 166.804 273.576 166.504 273.856 cv
166.204 274.136 166.024 274.536 165.984 275.046 cv
169.184 275.046 li
f
175.494 273.006 mo
175.494 273.846 li
175.234 273.706 174.984 273.606 174.724 273.536 cv
174.464 273.466 174.214 273.426 173.954 273.426 cv
173.374 273.426 172.914 273.616 172.594 273.986 cv
172.274 274.356 172.114 274.876 172.114 275.536 cv
172.114 276.206 172.274 276.726 172.594 277.096 cv
172.914 277.466 173.374 277.646 173.954 277.646 cv
174.214 277.646 174.464 277.616 174.724 277.546 cv
174.984 277.476 175.234 277.366 175.494 277.226 cv
175.494 278.056 li
175.234 278.176 174.974 278.266 174.714 278.316 cv
174.444 278.366 174.154 278.396 173.854 278.396 cv
173.034 278.396 172.374 278.146 171.894 277.626 cv
171.404 277.116 171.164 276.416 171.164 275.536 cv
171.164 274.646 171.404 273.946 171.894 273.436 cv
172.384 272.926 173.054 272.666 173.914 272.666 cv
174.194 272.666 174.464 272.696 174.724 272.756 cv
174.984 272.816 175.244 272.896 175.494 273.006 cv
f
179.174 273.426 mo
178.694 273.426 178.314 273.616 178.034 273.996 cv
177.754 274.376 177.614 274.886 177.614 275.536 cv
177.614 276.196 177.744 276.706 178.024 277.086 cv
178.304 277.466 178.684 277.646 179.174 277.646 cv
179.654 277.646 180.034 277.466 180.314 277.086 cv
180.594 276.706 180.734 276.196 180.734 275.536 cv
180.734 274.896 180.594 274.376 180.314 273.996 cv
180.034 273.616 179.654 273.426 179.174 273.426 cv
179.174 272.666 mo
179.954 272.666 180.564 272.926 181.014 273.426 cv
181.454 273.936 181.684 274.636 181.684 275.536 cv
181.684 276.436 181.454 277.136 181.014 277.636 cv
180.564 278.146 179.954 278.396 179.174 278.396 cv
178.384 278.396 177.764 278.146 177.324 277.636 cv
176.884 277.136 176.664 276.436 176.664 275.536 cv
176.664 274.636 176.884 273.936 177.324 273.426 cv
177.764 272.926 178.384 272.666 179.174 272.666 cv
f
187.434 273.846 mo
187.654 273.446 187.924 273.156 188.234 272.956 cv
188.544 272.766 188.914 272.666 189.344 272.666 cv
189.904 272.666 190.344 272.866 190.654 273.266 cv
190.964 273.666 191.124 274.236 191.124 274.966 cv
191.124 278.266 li
190.224 278.266 li
190.224 274.996 li
190.224 274.476 190.124 274.086 189.944 273.826 cv
189.754 273.576 189.474 273.446 189.094 273.446 cv
188.624 273.446 188.254 273.606 187.984 273.916 cv
187.714 274.226 187.584 274.646 187.584 275.176 cv
187.584 278.266 li
186.684 278.266 li
186.684 274.996 li
186.684 274.476 186.584 274.086 186.404 273.826 cv
186.214 273.576 185.924 273.446 185.544 273.446 cv
185.084 273.446 184.714 273.606 184.444 273.916 cv
184.174 274.226 184.044 274.646 184.044 275.176 cv
184.044 278.266 li
183.144 278.266 li
183.144 272.796 li
184.044 272.796 li
184.044 273.646 li
184.244 273.316 184.494 273.066 184.784 272.906 cv
185.064 272.746 185.404 272.666 185.804 272.666 cv
186.204 272.666 186.534 272.766 186.814 272.966 cv
187.094 273.166 187.294 273.466 187.434 273.846 cv
f
197.174 273.846 mo
197.394 273.446 197.664 273.156 197.974 272.956 cv
198.284 272.766 198.654 272.666 199.084 272.666 cv
199.644 272.666 200.084 272.866 200.394 273.266 cv
200.704 273.666 200.864 274.236 200.864 274.966 cv
200.864 278.266 li
199.964 278.266 li
199.964 274.996 li
199.964 274.476 199.864 274.086 199.684 273.826 cv
199.494 273.576 199.214 273.446 198.834 273.446 cv
198.364 273.446 197.994 273.606 197.724 273.916 cv
197.454 274.226 197.324 274.646 197.324 275.176 cv
197.324 278.266 li
196.424 278.266 li
196.424 274.996 li
196.424 274.476 196.324 274.086 196.144 273.826 cv
195.954 273.576 195.664 273.446 195.284 273.446 cv
194.824 273.446 194.454 273.606 194.184 273.916 cv
193.914 274.226 193.784 274.646 193.784 275.176 cv
193.784 278.266 li
192.884 278.266 li
192.884 272.796 li
193.784 272.796 li
193.784 273.646 li
193.984 273.316 194.234 273.066 194.524 272.906 cv
194.804 272.746 195.144 272.666 195.544 272.666 cv
195.944 272.666 196.274 272.766 196.554 272.966 cv
196.834 273.166 197.034 273.466 197.174 273.846 cv
f
207.334 275.306 mo
207.334 275.746 li
203.204 275.746 li
203.244 276.366 203.424 276.846 203.764 277.166 cv
204.094 277.486 204.554 277.646 205.154 277.646 cv
205.494 277.646 205.834 277.606 206.154 277.526 cv
206.474 277.446 206.804 277.316 207.124 277.136 cv
207.124 277.986 li
206.804 278.126 206.474 278.236 206.134 278.296 cv
205.794 278.356 205.444 278.396 205.104 278.396 cv
204.224 278.396 203.534 278.146 203.024 277.646 cv
202.514 277.146 202.264 276.456 202.264 275.586 cv
202.264 274.696 202.504 273.986 202.984 273.456 cv
203.464 272.936 204.124 272.666 204.944 272.666 cv
205.684 272.666 206.264 272.906 206.694 273.376 cv
207.114 273.856 207.334 274.496 207.334 275.306 cv
206.434 275.046 mo
206.424 274.556 206.284 274.166 206.024 273.866 cv
205.754 273.576 205.394 273.426 204.954 273.426 cv
204.454 273.426 204.054 273.576 203.754 273.856 cv
203.454 274.136 203.274 274.536 203.234 275.046 cv
206.434 275.046 li
f
213.354 274.966 mo
213.354 278.266 li
212.454 278.266 li
212.454 274.996 li
212.454 274.476 212.344 274.096 212.144 273.836 cv
211.944 273.576 211.644 273.446 211.244 273.446 cv
210.754 273.446 210.374 273.606 210.094 273.916 cv
209.814 274.226 209.674 274.646 209.674 275.176 cv
209.674 278.266 li
208.774 278.266 li
208.774 272.796 li
209.674 272.796 li
209.674 273.646 li
209.884 273.326 210.134 273.076 210.434 272.916 cv
210.724 272.756 211.064 272.666 211.444 272.666 cv
212.064 272.666 212.544 272.866 212.864 273.256 cv
213.184 273.646 213.354 274.216 213.354 274.966 cv
f
218.744 273.626 mo
218.744 270.666 li
219.644 270.666 li
219.644 278.266 li
218.744 278.266 li
218.744 277.446 li
218.554 277.776 218.314 278.016 218.024 278.166 cv
217.734 278.316 217.394 278.396 216.994 278.396 cv
216.334 278.396 215.794 278.136 215.374 277.616 cv
214.954 277.096 214.754 276.396 214.754 275.536 cv
214.754 274.676 214.954 273.986 215.374 273.456 cv
215.794 272.936 216.334 272.666 216.994 272.666 cv
217.394 272.666 217.734 272.746 218.024 272.906 cv
218.314 273.066 218.554 273.306 218.744 273.626 cv
215.684 275.536 mo
215.684 276.196 215.814 276.716 216.084 277.096 cv
216.354 277.476 216.734 277.656 217.214 277.656 cv
217.684 277.656 218.054 277.476 218.334 277.096 cv
218.604 276.716 218.744 276.196 218.744 275.536 cv
218.744 274.876 218.604 274.366 218.334 273.986 cv
218.054 273.606 217.684 273.416 217.214 273.416 cv
216.734 273.416 216.354 273.606 216.084 273.986 cv
215.814 274.366 215.684 274.876 215.684 275.536 cv
f
226.174 275.306 mo
226.174 275.746 li
222.044 275.746 li
222.084 276.366 222.264 276.846 222.604 277.166 cv
222.934 277.486 223.394 277.646 223.994 277.646 cv
224.334 277.646 224.674 277.606 224.994 277.526 cv
225.314 277.446 225.644 277.316 225.964 277.136 cv
225.964 277.986 li
225.644 278.126 225.314 278.236 224.974 278.296 cv
224.634 278.356 224.284 278.396 223.944 278.396 cv
223.064 278.396 222.374 278.146 221.864 277.646 cv
221.354 277.146 221.104 276.456 221.104 275.586 cv
221.104 274.696 221.344 273.986 221.824 273.456 cv
222.304 272.936 222.964 272.666 223.784 272.666 cv
224.524 272.666 225.104 272.906 225.534 273.376 cv
225.954 273.856 226.174 274.496 226.174 275.306 cv
225.274 275.046 mo
225.264 274.556 225.124 274.166 224.864 273.866 cv
224.594 273.576 224.234 273.426 223.794 273.426 cv
223.294 273.426 222.894 273.576 222.594 273.856 cv
222.294 274.136 222.114 274.536 222.074 275.046 cv
225.274 275.046 li
f
231.244 273.626 mo
231.244 270.666 li
232.144 270.666 li
232.144 278.266 li
231.244 278.266 li
231.244 277.446 li
231.054 277.776 230.814 278.016 230.524 278.166 cv
230.234 278.316 229.894 278.396 229.494 278.396 cv
228.834 278.396 228.294 278.136 227.874 277.616 cv
227.454 277.096 227.254 276.396 227.254 275.536 cv
227.254 274.676 227.454 273.986 227.874 273.456 cv
228.294 272.936 228.834 272.666 229.494 272.666 cv
229.894 272.666 230.234 272.746 230.524 272.906 cv
230.814 273.066 231.054 273.306 231.244 273.626 cv
228.184 275.536 mo
228.184 276.196 228.314 276.716 228.584 277.096 cv
228.854 277.476 229.234 277.656 229.714 277.656 cv
230.184 277.656 230.554 277.476 230.834 277.096 cv
231.104 276.716 231.244 276.196 231.244 275.536 cv
231.244 274.876 231.104 274.366 230.834 273.986 cv
230.554 273.606 230.184 273.416 229.714 273.416 cv
229.234 273.416 228.854 273.606 228.584 273.986 cv
228.314 274.366 228.184 274.876 228.184 275.536 cv
f
237.214 270.976 mo
241.404 270.976 li
241.404 271.806 li
238.204 271.806 li
238.204 273.956 li
241.094 273.956 li
241.094 274.786 li
238.204 274.786 li
238.204 278.266 li
237.214 278.266 li
237.214 270.976 li
f
242.924 270.666 mo
243.824 270.666 li
243.824 278.266 li
242.924 278.266 li
242.924 270.666 li
f
245.704 272.796 mo
246.604 272.796 li
246.604 278.266 li
245.704 278.266 li
245.704 272.796 li
245.704 270.666 mo
246.604 270.666 li
246.604 271.806 li
245.704 271.806 li
245.704 270.666 li
f
252.084 275.466 mo
252.084 274.826 251.944 274.316 251.684 273.956 cv
251.414 273.596 251.034 273.416 250.554 273.416 cv
250.074 273.416 249.694 273.596 249.424 273.956 cv
249.154 274.316 249.024 274.826 249.024 275.466 cv
249.024 276.116 249.154 276.616 249.424 276.976 cv
249.694 277.336 250.074 277.516 250.554 277.516 cv
251.034 277.516 251.414 277.336 251.684 276.976 cv
251.944 276.616 252.084 276.116 252.084 275.466 cv
252.984 277.586 mo
252.984 278.506 252.774 279.196 252.364 279.656 cv
251.944 280.106 251.314 280.336 250.464 280.336 cv
250.144 280.336 249.854 280.306 249.574 280.266 cv
249.294 280.216 249.014 280.146 248.754 280.046 cv
248.754 279.176 li
249.014 279.316 249.274 279.416 249.534 279.486 cv
249.794 279.556 250.054 279.596 250.324 279.596 cv
250.904 279.596 251.344 279.436 251.644 279.136 cv
251.934 278.826 252.084 278.366 252.084 277.746 cv
252.084 277.306 li
251.894 277.626 251.654 277.866 251.364 278.026 cv
251.074 278.186 250.734 278.266 250.334 278.266 cv
249.654 278.266 249.114 278.016 248.704 277.506 cv
248.294 276.996 248.094 276.316 248.094 275.466 cv
248.094 274.626 248.294 273.946 248.704 273.436 cv
249.114 272.926 249.654 272.666 250.334 272.666 cv
250.734 272.666 251.074 272.746 251.364 272.906 cv
251.654 273.066 251.894 273.306 252.084 273.626 cv
252.084 272.796 li
252.984 272.796 li
252.984 277.586 li
f
259.384 274.966 mo
259.384 278.266 li
258.484 278.266 li
258.484 274.996 li
258.484 274.476 258.374 274.096 258.174 273.836 cv
257.974 273.576 257.674 273.446 257.274 273.446 cv
256.784 273.446 256.404 273.606 256.124 273.916 cv
255.844 274.226 255.704 274.646 255.704 275.176 cv
255.704 278.266 li
254.804 278.266 li
254.804 270.666 li
255.704 270.666 li
255.704 273.646 li
255.914 273.326 256.164 273.076 256.464 272.916 cv
256.754 272.756 257.094 272.666 257.474 272.666 cv
258.094 272.666 258.574 272.866 258.894 273.256 cv
259.214 273.646 259.384 274.216 259.384 274.966 cv
f
262.064 271.246 mo
262.064 272.796 li
263.914 272.796 li
263.914 273.496 li
262.064 273.496 li
262.064 276.466 li
262.064 276.916 262.124 277.206 262.244 277.326 cv
262.364 277.456 262.614 277.516 262.994 277.516 cv
263.914 277.516 li
263.914 278.266 li
262.994 278.266 li
262.294 278.266 261.814 278.136 261.554 277.876 cv
261.294 277.616 261.164 277.146 261.164 276.466 cv
261.164 273.496 li
260.504 273.496 li
260.504 272.796 li
261.164 272.796 li
261.164 271.246 li
262.064 271.246 li
f
268.584 272.956 mo
268.584 273.806 li
268.324 273.686 268.064 273.586 267.794 273.516 cv
267.514 273.456 267.234 273.416 266.944 273.416 cv
266.494 273.416 266.154 273.486 265.934 273.626 cv
265.714 273.766 265.604 273.966 265.604 274.236 cv
265.604 274.446 265.684 274.606 265.844 274.726 cv
266.004 274.846 266.324 274.966 266.804 275.066 cv
267.114 275.136 li
267.754 275.276 268.204 275.476 268.474 275.716 cv
268.734 275.966 268.874 276.316 268.874 276.756 cv
268.874 277.266 268.674 277.666 268.274 277.956 cv
267.874 278.256 267.314 278.396 266.614 278.396 cv
266.314 278.396 266.014 278.366 265.694 278.316 cv
265.374 278.266 265.044 278.186 264.694 278.066 cv
264.694 277.136 li
265.024 277.316 265.354 277.446 265.674 277.526 cv
265.994 277.616 266.314 277.656 266.634 277.656 cv
267.054 277.656 267.384 277.586 267.614 277.446 cv
267.834 277.306 267.954 277.096 267.954 276.826 cv
267.954 276.586 267.864 276.396 267.704 276.266 cv
267.544 276.136 267.184 276.006 266.624 275.886 cv
266.314 275.816 li
265.754 275.696 265.344 275.516 265.104 275.276 cv
264.854 275.036 264.734 274.706 264.734 274.276 cv
264.734 273.766 264.914 273.366 265.274 273.086 cv
265.634 272.806 266.154 272.666 266.834 272.666 cv
267.164 272.666 267.474 272.696 267.774 272.746 cv
268.064 272.796 268.334 272.866 268.584 272.956 cv
f
275.644 270.676 mo
275.204 271.436 274.884 272.176 274.674 272.906 cv
274.454 273.636 274.354 274.376 274.354 275.126 cv
274.354 275.886 274.454 276.626 274.674 277.356 cv
274.884 278.096 275.204 278.826 275.644 279.576 cv
274.864 279.576 li
274.374 278.806 274.004 278.066 273.764 277.326 cv
273.524 276.586 273.404 275.856 273.404 275.126 cv
273.404 274.406 273.524 273.676 273.764 272.936 cv
274.004 272.196 274.364 271.446 274.864 270.676 cv
275.644 270.676 li
f
276.424 270.976 mo
282.584 270.976 li
282.584 271.806 li
279.994 271.806 li
279.994 278.266 li
279.004 278.266 li
279.004 271.806 li
276.424 271.806 li
276.424 270.976 li
f
285.614 273.426 mo
285.134 273.426 284.754 273.616 284.474 273.996 cv
284.194 274.376 284.054 274.886 284.054 275.536 cv
284.054 276.196 284.184 276.706 284.464 277.086 cv
284.744 277.466 285.124 277.646 285.614 277.646 cv
286.094 277.646 286.474 277.466 286.754 277.086 cv
287.034 276.706 287.174 276.196 287.174 275.536 cv
287.174 274.896 287.034 274.376 286.754 273.996 cv
286.474 273.616 286.094 273.426 285.614 273.426 cv
285.614 272.666 mo
286.394 272.666 287.004 272.926 287.454 273.426 cv
287.894 273.936 288.124 274.636 288.124 275.536 cv
288.124 276.436 287.894 277.136 287.454 277.636 cv
287.004 278.146 286.394 278.396 285.614 278.396 cv
284.824 278.396 284.204 278.146 283.764 277.636 cv
283.324 277.136 283.104 276.436 283.104 275.536 cv
283.104 274.636 283.324 273.936 283.764 273.426 cv
284.204 272.926 284.824 272.666 285.614 272.666 cv
f
290.484 277.446 mo
290.484 280.336 li
289.584 280.336 li
289.584 272.796 li
290.484 272.796 li
290.484 273.626 li
290.664 273.306 290.904 273.066 291.194 272.906 cv
291.484 272.746 291.834 272.666 292.234 272.666 cv
292.894 272.666 293.434 272.936 293.854 273.456 cv
294.264 273.986 294.474 274.676 294.474 275.536 cv
294.474 276.396 294.264 277.096 293.854 277.616 cv
293.434 278.136 292.894 278.396 292.234 278.396 cv
291.834 278.396 291.484 278.316 291.194 278.166 cv
290.904 278.016 290.664 277.776 290.484 277.446 cv
293.544 275.536 mo
293.544 274.876 293.404 274.366 293.134 273.986 cv
292.854 273.606 292.484 273.416 292.014 273.416 cv
291.534 273.416 291.164 273.606 290.894 273.986 cv
290.614 274.366 290.484 274.876 290.484 275.536 cv
290.484 276.196 290.614 276.716 290.894 277.096 cv
291.164 277.476 291.534 277.656 292.014 277.656 cv
292.484 277.656 292.854 277.476 293.134 277.096 cv
293.404 276.716 293.544 276.196 293.544 275.536 cv
f
299.184 270.976 mo
300.514 270.976 li
303.744 277.076 li
303.744 270.976 li
304.704 270.976 li
304.704 278.266 li
303.374 278.266 li
300.144 272.166 li
300.144 278.266 li
299.184 278.266 li
299.184 270.976 li
f
306.484 270.676 mo
307.264 270.676 li
307.744 271.446 308.114 272.196 308.354 272.936 cv
308.594 273.676 308.724 274.406 308.724 275.126 cv
308.724 275.856 308.594 276.586 308.354 277.326 cv
308.114 278.066 307.744 278.806 307.264 279.576 cv
306.484 279.576 li
306.914 278.826 307.234 278.096 307.454 277.356 cv
307.664 276.626 307.774 275.886 307.774 275.126 cv
307.774 274.376 307.664 273.636 307.454 272.906 cv
307.234 272.176 306.914 271.436 306.484 270.676 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 252 mo
388.8 252 li
@
grestore
54 252 mo
58 252 li
f
54 252 mo
58 252 li
@
388.8 252 mo
384.8 252 li
f
388.8 252 mo
384.8 252 li
@
46.8206 248.118 mo
46.3106 248.118 45.9306 248.368 45.6706 248.868 cv
45.4106 249.368 45.2906 250.118 45.2906 251.118 cv
45.2906 252.118 45.4106 252.868 45.6706 253.368 cv
45.9306 253.868 46.3106 254.118 46.8206 254.118 cv
47.3306 254.118 47.7106 253.868 47.9706 253.368 cv
48.2206 252.868 48.3506 252.118 48.3506 251.118 cv
48.3506 250.118 48.2206 249.368 47.9706 248.868 cv
47.7106 248.368 47.3306 248.118 46.8206 248.118 cv
46.8206 247.338 mo
47.6306 247.338 48.2506 247.668 48.6906 248.308 cv
49.1206 248.958 49.3406 249.898 49.3406 251.118 cv
49.3406 252.348 49.1206 253.288 48.6906 253.928 cv
48.2506 254.568 47.6306 254.888 46.8206 254.888 cv
46.0006 254.888 45.3706 254.568 44.9406 253.928 cv
44.5106 253.288 44.3006 252.348 44.3006 251.118 cv
44.3006 249.898 44.5106 248.958 44.9406 248.308 cv
45.3706 247.668 46.0006 247.338 46.8206 247.338 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 220.114 mo
388.8 220.114 li
@
grestore
54 220.114 mo
58 220.114 li
f
54 220.114 mo
58 220.114 li
@
388.8 220.114 mo
384.8 220.114 li
f
388.8 220.114 mo
384.8 220.114 li
@
38.5213 222.042 mo
40.1312 222.042 li
40.1312 216.482 li
38.3812 216.832 li
38.3812 215.932 li
40.1213 215.582 li
41.1113 215.582 li
41.1113 222.042 li
42.7213 222.042 li
42.7213 222.872 li
38.5213 222.872 li
38.5213 222.042 li
f
46.8213 216.232 mo
46.3113 216.232 45.9313 216.482 45.6713 216.982 cv
45.4113 217.482 45.2913 218.232 45.2913 219.232 cv
45.2913 220.232 45.4113 220.982 45.6713 221.482 cv
45.9313 221.982 46.3113 222.232 46.8213 222.232 cv
47.3313 222.232 47.7113 221.982 47.9713 221.482 cv
48.2213 220.982 48.3513 220.232 48.3513 219.232 cv
48.3513 218.232 48.2213 217.482 47.9713 216.982 cv
47.7113 216.482 47.3313 216.232 46.8213 216.232 cv
46.8213 215.452 mo
47.6313 215.452 48.2513 215.782 48.6913 216.422 cv
49.1213 217.072 49.3413 218.012 49.3413 219.232 cv
49.3413 220.462 49.1213 221.402 48.6913 222.042 cv
48.2513 222.682 47.6313 223.002 46.8213 223.002 cv
46.0013 223.002 45.3713 222.682 44.9413 222.042 cv
44.5113 221.402 44.3013 220.462 44.3013 219.232 cv
44.3013 218.012 44.5113 217.072 44.9413 216.422 cv
45.3713 215.782 46.0013 215.452 46.8213 215.452 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 188.229 mo
388.8 188.229 li
@
grestore
54 188.229 mo
58 188.229 li
f
54 188.229 mo
58 188.229 li
@
388.8 188.229 mo
384.8 188.229 li
f
388.8 188.229 mo
384.8 188.229 li
@
39.2012 190.156 mo
42.6413 190.156 li
42.6413 190.986 li
38.0112 190.986 li
38.0112 190.156 li
38.3812 189.776 38.8913 189.256 39.5413 188.596 cv
40.1813 187.946 40.5913 187.526 40.7612 187.336 cv
41.0812 186.986 41.3013 186.686 41.4212 186.436 cv
41.5413 186.196 41.6113 185.946 41.6113 185.706 cv
41.6113 185.326 41.4713 185.006 41.2013 184.766 cv
40.9313 184.526 40.5812 184.396 40.1413 184.396 cv
39.8312 184.396 39.5013 184.456 39.1613 184.556 cv
38.8213 184.666 38.4512 184.826 38.0612 185.046 cv
38.0612 184.046 li
38.4613 183.886 38.8312 183.766 39.1712 183.686 cv
39.5112 183.606 39.8312 183.566 40.1213 183.566 cv
40.8713 183.566 41.4713 183.756 41.9212 184.136 cv
42.3713 184.516 42.6012 185.016 42.6012 185.646 cv
42.6012 185.946 42.5413 186.236 42.4313 186.496 cv
42.3213 186.766 42.1213 187.086 41.8213 187.446 cv
41.7412 187.546 41.4813 187.816 41.0413 188.266 cv
40.6012 188.716 39.9912 189.346 39.2012 190.156 cv
f
46.8213 184.346 mo
46.3113 184.346 45.9313 184.596 45.6713 185.096 cv
45.4113 185.596 45.2913 186.346 45.2913 187.346 cv
45.2913 188.346 45.4113 189.096 45.6713 189.596 cv
45.9313 190.096 46.3113 190.346 46.8213 190.346 cv
47.3313 190.346 47.7113 190.096 47.9713 189.596 cv
48.2213 189.096 48.3513 188.346 48.3513 187.346 cv
48.3513 186.346 48.2213 185.596 47.9713 185.096 cv
47.7113 184.596 47.3313 184.346 46.8213 184.346 cv
46.8213 183.566 mo
47.6313 183.566 48.2513 183.896 48.6913 184.536 cv
49.1213 185.186 49.3413 186.126 49.3413 187.346 cv
49.3413 188.576 49.1213 189.516 48.6913 190.156 cv
48.2513 190.796 47.6313 191.116 46.8213 191.116 cv
46.0013 191.116 45.3713 190.796 44.9413 190.156 cv
44.5113 189.516 44.3013 188.576 44.3013 187.346 cv
44.3013 186.126 44.5113 185.186 44.9413 184.536 cv
45.3713 183.896 46.0013 183.566 46.8213 183.566 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 156.343 mo
388.8 156.343 li
@
grestore
54 156.343 mo
58 156.343 li
f
54 156.343 mo
58 156.343 li
@
388.8 156.343 mo
384.8 156.343 li
f
388.8 156.343 mo
384.8 156.343 li
@
41.3413 155.171 mo
41.8112 155.271 42.1813 155.481 42.4412 155.801 cv
42.7013 156.121 42.8413 156.521 42.8413 156.981 cv
42.8413 157.701 42.5913 158.261 42.1012 158.651 cv
41.6012 159.041 40.9012 159.231 39.9912 159.231 cv
39.6813 159.231 39.3613 159.201 39.0412 159.141 cv
38.7212 159.091 38.3812 159.001 38.0412 158.881 cv
38.0412 157.931 li
38.3112 158.091 38.6113 158.211 38.9412 158.291 cv
39.2612 158.371 39.6012 158.411 39.9613 158.411 cv
40.5812 158.411 41.0513 158.291 41.3713 158.051 cv
41.6912 157.811 41.8613 157.451 41.8613 156.981 cv
41.8613 156.561 41.7113 156.221 41.4113 155.981 cv
41.1113 155.741 40.6912 155.611 40.1512 155.611 cv
39.3013 155.611 li
39.3013 154.801 li
40.1912 154.801 li
40.6712 154.801 41.0413 154.711 41.3013 154.511 cv
41.5612 154.321 41.6912 154.041 41.6912 153.671 cv
41.6912 153.301 41.5513 153.011 41.2913 152.811 cv
41.0213 152.611 40.6413 152.511 40.1512 152.511 cv
39.8812 152.511 39.5913 152.541 39.2813 152.601 cv
38.9712 152.661 38.6312 152.751 38.2612 152.871 cv
38.2612 151.991 li
38.6312 151.891 38.9813 151.811 39.3112 151.761 cv
39.6312 151.711 39.9412 151.681 40.2412 151.681 cv
40.9813 151.681 41.5713 151.851 42.0112 152.191 cv
42.4513 152.531 42.6712 152.991 42.6712 153.571 cv
42.6712 153.971 42.5513 154.311 42.3213 154.591 cv
42.0913 154.871 41.7612 155.071 41.3413 155.171 cv
f
46.8213 152.461 mo
46.3113 152.461 45.9313 152.711 45.6713 153.211 cv
45.4113 153.711 45.2913 154.461 45.2913 155.461 cv
45.2913 156.461 45.4113 157.211 45.6713 157.711 cv
45.9313 158.211 46.3113 158.461 46.8213 158.461 cv
47.3313 158.461 47.7113 158.211 47.9713 157.711 cv
48.2213 157.211 48.3513 156.461 48.3513 155.461 cv
48.3513 154.461 48.2213 153.711 47.9713 153.211 cv
47.7113 152.711 47.3313 152.461 46.8213 152.461 cv
46.8213 151.681 mo
47.6313 151.681 48.2513 152.011 48.6913 152.651 cv
49.1213 153.301 49.3413 154.241 49.3413 155.461 cv
49.3413 156.691 49.1213 157.631 48.6913 158.271 cv
48.2513 158.911 47.6313 159.231 46.8213 159.231 cv
46.0013 159.231 45.3713 158.911 44.9413 158.271 cv
44.5113 157.631 44.3013 156.691 44.3013 155.461 cv
44.3013 154.241 44.5113 153.301 44.9413 152.651 cv
45.3713 152.011 46.0013 151.681 46.8213 151.681 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 124.457 mo
388.8 124.457 li
@
grestore
54 124.457 mo
58 124.457 li
f
54 124.457 mo
58 124.457 li
@
388.8 124.457 mo
384.8 124.457 li
f
388.8 124.457 mo
384.8 124.457 li
@
41.0612 120.785 mo
38.5713 124.675 li
41.0612 124.675 li
41.0612 120.785 li
40.8013 119.925 mo
42.0413 119.925 li
42.0413 124.675 li
43.0812 124.675 li
43.0812 125.495 li
42.0413 125.495 li
42.0413 127.215 li
41.0612 127.215 li
41.0612 125.495 li
37.7713 125.495 li
37.7713 124.545 li
40.8013 119.925 li
f
46.8213 120.575 mo
46.3113 120.575 45.9313 120.825 45.6713 121.325 cv
45.4113 121.825 45.2913 122.575 45.2913 123.575 cv
45.2913 124.575 45.4113 125.325 45.6713 125.825 cv
45.9313 126.325 46.3113 126.575 46.8213 126.575 cv
47.3313 126.575 47.7113 126.325 47.9713 125.825 cv
48.2213 125.325 48.3513 124.575 48.3513 123.575 cv
48.3513 122.575 48.2213 121.825 47.9713 121.325 cv
47.7113 120.825 47.3313 120.575 46.8213 120.575 cv
46.8213 119.795 mo
47.6313 119.795 48.2513 120.125 48.6913 120.765 cv
49.1213 121.415 49.3413 122.355 49.3413 123.575 cv
49.3413 124.805 49.1213 125.745 48.6913 126.385 cv
48.2513 127.025 47.6313 127.345 46.8213 127.345 cv
46.0013 127.345 45.3713 127.025 44.9413 126.385 cv
44.5113 125.745 44.3013 124.805 44.3013 123.575 cv
44.3013 122.355 44.5113 121.415 44.9413 120.765 cv
45.3713 120.125 46.0013 119.795 46.8213 119.795 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 92.5714 mo
388.8 92.5714 li
@
grestore
54 92.5714 mo
58 92.5714 li
f
54 92.5714 mo
58 92.5714 li
@
388.8 92.5714 mo
384.8 92.5714 li
f
388.8 92.5714 mo
384.8 92.5714 li
@
38.3613 88.0392 mo
42.2313 88.0392 li
42.2313 88.8692 li
39.2612 88.8692 li
39.2612 90.6592 li
39.4012 90.6092 39.5513 90.5692 39.6912 90.5492 cv
39.8312 90.5292 39.9813 90.5092 40.1213 90.5092 cv
40.9313 90.5092 41.5713 90.7392 42.0513 91.1792 cv
42.5313 91.6292 42.7713 92.2292 42.7713 92.9892 cv
42.7713 93.7792 42.5213 94.3892 42.0313 94.8192 cv
41.5413 95.2492 40.8512 95.4592 39.9712 95.4592 cv
39.6613 95.4592 39.3512 95.4292 39.0313 95.3892 cv
38.7113 95.3392 38.3913 95.2692 38.0513 95.1592 cv
38.0513 94.1692 li
38.3413 94.3292 38.6413 94.4492 38.9613 94.5292 cv
39.2713 94.6092 39.6012 94.6392 39.9512 94.6392 cv
40.5112 94.6392 40.9613 94.4992 41.2913 94.1992 cv
41.6113 93.8992 41.7813 93.4992 41.7813 92.9892 cv
41.7813 92.4892 41.6113 92.0892 41.2913 91.7892 cv
40.9613 91.4892 40.5112 91.3392 39.9512 91.3392 cv
39.6912 91.3392 39.4212 91.3692 39.1613 91.4292 cv
38.9012 91.4892 38.6312 91.5792 38.3613 91.6992 cv
38.3613 88.0392 li
f
46.8213 88.6892 mo
46.3113 88.6892 45.9313 88.9392 45.6713 89.4392 cv
45.4113 89.9392 45.2913 90.6892 45.2913 91.6892 cv
45.2913 92.6892 45.4113 93.4392 45.6713 93.9392 cv
45.9313 94.4392 46.3113 94.6892 46.8213 94.6892 cv
47.3313 94.6892 47.7113 94.4392 47.9713 93.9392 cv
48.2213 93.4392 48.3513 92.6892 48.3513 91.6892 cv
48.3513 90.6892 48.2213 89.9392 47.9713 89.4392 cv
47.7113 88.9392 47.3313 88.6892 46.8213 88.6892 cv
46.8213 87.9092 mo
47.6313 87.9092 48.2513 88.2392 48.6913 88.8792 cv
49.1213 89.5292 49.3413 90.4692 49.3413 91.6892 cv
49.3413 92.9192 49.1213 93.8592 48.6913 94.4992 cv
48.2513 95.1392 47.6313 95.4592 46.8213 95.4592 cv
46.0013 95.4592 45.3713 95.1392 44.9413 94.4992 cv
44.5113 93.8592 44.3013 92.9192 44.3013 91.6892 cv
44.3013 90.4692 44.5113 89.5292 44.9413 88.8792 cv
45.3713 88.2392 46.0013 87.9092 46.8213 87.9092 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 60.6857 mo
388.8 60.6857 li
@
grestore
54 60.6857 mo
58 60.6857 li
f
54 60.6857 mo
58 60.6857 li
@
388.8 60.6857 mo
384.8 60.6857 li
f
388.8 60.6857 mo
384.8 60.6857 li
@
40.5812 59.4035 mo
40.1413 59.4035 39.7913 59.5635 39.5313 59.8635 cv
39.2713 60.1635 39.1413 60.5835 39.1413 61.1035 cv
39.1413 61.6335 39.2713 62.0535 39.5313 62.3535 cv
39.7913 62.6535 40.1413 62.8035 40.5812 62.8035 cv
41.0213 62.8035 41.3713 62.6535 41.6312 62.3535 cv
41.8913 62.0535 42.0213 61.6335 42.0213 61.1035 cv
42.0213 60.5835 41.8913 60.1635 41.6312 59.8635 cv
41.3713 59.5635 41.0213 59.4035 40.5812 59.4035 cv
42.5413 56.3135 mo
42.5413 57.2135 li
42.2913 57.0935 42.0413 57.0035 41.7913 56.9435 cv
41.5313 56.8835 41.2813 56.8535 41.0413 56.8535 cv
40.3812 56.8535 39.8812 57.0735 39.5413 57.5135 cv
39.2012 57.9535 39.0013 58.6235 38.9613 59.5035 cv
39.1512 59.2235 39.3913 59.0035 39.6813 58.8535 cv
39.9712 58.7035 40.2913 58.6235 40.6413 58.6235 cv
41.3713 58.6235 41.9513 58.8535 42.3713 59.2935 cv
42.7913 59.7335 43.0112 60.3435 43.0112 61.1035 cv
43.0112 61.8535 42.7813 62.4535 42.3413 62.9035 cv
41.9012 63.3535 41.3112 63.5735 40.5812 63.5735 cv
39.7412 63.5735 39.0913 63.2535 38.6512 62.6135 cv
38.2012 61.9735 37.9813 61.0335 37.9813 59.8035 cv
37.9813 58.6535 38.2513 57.7335 38.8013 57.0535 cv
39.3413 56.3735 40.0812 56.0235 41.0013 56.0235 cv
41.2412 56.0235 41.4912 56.0535 41.7513 56.0935 cv
42.0013 56.1435 42.2612 56.2135 42.5413 56.3135 cv
f
46.8213 56.8035 mo
46.3113 56.8035 45.9313 57.0535 45.6713 57.5535 cv
45.4113 58.0535 45.2913 58.8035 45.2913 59.8035 cv
45.2913 60.8035 45.4113 61.5535 45.6713 62.0535 cv
45.9313 62.5535 46.3113 62.8035 46.8213 62.8035 cv
47.3313 62.8035 47.7113 62.5535 47.9713 62.0535 cv
48.2213 61.5535 48.3513 60.8035 48.3513 59.8035 cv
48.3513 58.8035 48.2213 58.0535 47.9713 57.5535 cv
47.7113 57.0535 47.3313 56.8035 46.8213 56.8035 cv
46.8213 56.0235 mo
47.6313 56.0235 48.2513 56.3535 48.6913 56.9935 cv
49.1213 57.6435 49.3413 58.5835 49.3413 59.8035 cv
49.3413 61.0335 49.1213 61.9735 48.6913 62.6135 cv
48.2513 63.2535 47.6313 63.5735 46.8213 63.5735 cv
46.0013 63.5735 45.3713 63.2535 44.9413 62.6135 cv
44.5113 61.9735 44.3013 61.0335 44.3013 59.8035 cv
44.3013 58.5835 44.5113 57.6435 44.9413 56.9935 cv
45.3713 56.3535 46.0013 56.0235 46.8213 56.0235 cv
f
gsave
54 252 mo
388.8 252 li
388.8 28.8 li
54 28.8 li
cp
clp
[1 3 ] 0 dsh
54 28.8 mo
388.8 28.8 li
@
grestore
54 28.8 mo
58 28.8 li
f
54 28.8 mo
58 28.8 li
@
388.8 28.8 mo
384.8 28.8 li
f
388.8 28.8 mo
384.8 28.8 li
@
38.1012 24.2678 mo
42.7913 24.2678 li
42.7913 24.6878 li
40.1413 31.5578 li
39.1113 31.5578 li
41.6012 25.0978 li
38.1012 25.0978 li
38.1012 24.2678 li
f
46.8213 24.9178 mo
46.3113 24.9178 45.9313 25.1678 45.6713 25.6678 cv
45.4113 26.1678 45.2913 26.9178 45.2913 27.9178 cv
45.2913 28.9178 45.4113 29.6678 45.6713 30.1678 cv
45.9313 30.6678 46.3113 30.9178 46.8213 30.9178 cv
47.3313 30.9178 47.7113 30.6678 47.9713 30.1678 cv
48.2213 29.6678 48.3513 28.9178 48.3513 27.9178 cv
48.3513 26.9178 48.2213 26.1678 47.9713 25.6678 cv
47.7113 25.1678 47.3313 24.9178 46.8213 24.9178 cv
46.8213 24.1378 mo
47.6313 24.1378 48.2513 24.4678 48.6913 25.1078 cv
49.1213 25.7578 49.3413 26.6978 49.3413 27.9178 cv
49.3413 29.1478 49.1213 30.0878 48.6913 30.7278 cv
48.2513 31.3678 47.6313 31.6878 46.8213 31.6878 cv
46.0013 31.6878 45.3713 31.3678 44.9413 30.7278 cv
44.5113 30.0878 44.3013 29.1478 44.3013 27.9178 cv
44.3013 26.6978 44.5113 25.7578 44.9413 25.1078 cv
45.3713 24.4678 46.0013 24.1378 46.8213 24.1378 cv
f
23.1831 187.078 mo
24.7331 187.078 li
24.7331 185.228 li
25.4331 185.228 li
25.4331 187.078 li
28.4031 187.078 li
28.8531 187.078 29.1431 187.018 29.2631 186.898 cv
29.3931 186.778 29.4531 186.528 29.4531 186.148 cv
29.4531 185.228 li
30.2031 185.228 li
30.2031 186.148 li
30.2031 186.848 30.0731 187.328 29.8131 187.588 cv
29.5531 187.848 29.0831 187.978 28.4031 187.978 cv
25.4331 187.978 li
25.4331 188.638 li
24.7331 188.638 li
24.7331 187.978 li
23.1831 187.978 li
23.1831 187.078 li
f
25.3631 181.928 mo
25.3631 182.408 25.5531 182.788 25.9331 183.068 cv
26.3131 183.348 26.8231 183.488 27.4731 183.488 cv
28.1331 183.488 28.6431 183.358 29.0231 183.078 cv
29.4031 182.798 29.5831 182.418 29.5831 181.928 cv
29.5831 181.448 29.4031 181.068 29.0231 180.788 cv
28.6431 180.508 28.1331 180.368 27.4731 180.368 cv
26.8331 180.368 26.3131 180.508 25.9331 180.788 cv
25.5531 181.068 25.3631 181.448 25.3631 181.928 cv
24.6031 181.928 mo
24.6031 181.148 24.8631 180.538 25.3631 180.088 cv
25.8731 179.648 26.5731 179.418 27.4731 179.418 cv
28.3731 179.418 29.0731 179.648 29.5731 180.088 cv
30.0831 180.538 30.3331 181.148 30.3331 181.928 cv
30.3331 182.718 30.0831 183.338 29.5731 183.778 cv
29.0731 184.218 28.3731 184.438 27.4731 184.438 cv
26.5731 184.438 25.8731 184.218 25.3631 183.778 cv
24.8631 183.338 24.6031 182.718 24.6031 181.928 cv
f
29.3831 177.058 mo
32.2731 177.058 li
32.2731 177.958 li
24.7331 177.958 li
24.7331 177.058 li
25.5631 177.058 li
25.2431 176.878 25.0031 176.638 24.8431 176.348 cv
24.6831 176.058 24.6031 175.708 24.6031 175.308 cv
24.6031 174.648 24.8731 174.108 25.3931 173.688 cv
25.9231 173.278 26.6131 173.068 27.4731 173.068 cv
28.3331 173.068 29.0331 173.278 29.5531 173.688 cv
30.0731 174.108 30.3331 174.648 30.3331 175.308 cv
30.3331 175.708 30.2531 176.058 30.1031 176.348 cv
29.9531 176.638 29.7131 176.878 29.3831 177.058 cv
27.4731 173.998 mo
26.8131 173.998 26.3031 174.138 25.9231 174.408 cv
25.5431 174.688 25.3531 175.058 25.3531 175.528 cv
25.3531 176.008 25.5431 176.378 25.9231 176.648 cv
26.3031 176.928 26.8131 177.058 27.4731 177.058 cv
28.1331 177.058 28.6531 176.928 29.0331 176.648 cv
29.4131 176.378 29.5931 176.008 29.5931 175.528 cv
29.5931 175.058 29.4131 174.688 29.0331 174.408 cv
28.6531 174.138 28.1331 173.998 27.4731 173.998 cv
f
27.0631 172.028 mo
27.0631 169.398 li
27.8631 169.398 li
27.8631 172.028 li
27.0631 172.028 li
f
22.9131 167.928 mo
22.9131 166.598 li
29.0131 163.368 li
22.9131 163.368 li
22.9131 162.408 li
30.2031 162.408 li
30.2031 163.738 li
24.1031 166.968 li
30.2031 166.968 li
30.2031 167.928 li
22.9131 167.928 li
f
23.8831 154.828 mo
27.5131 156.168 li
27.5131 153.488 li
23.8831 154.828 li
22.9131 155.388 mo
22.9131 154.268 li
30.2031 151.488 li
30.2031 152.518 li
28.3331 153.178 li
28.3331 156.468 li
30.2031 157.128 li
30.2031 158.168 li
22.9131 155.388 li
f
24.9431 146.528 mo
25.7831 146.528 li
25.6431 146.788 25.5431 147.038 25.4731 147.298 cv
25.4031 147.558 25.3631 147.808 25.3631 148.068 cv
25.3631 148.648 25.5531 149.108 25.9231 149.428 cv
26.2931 149.748 26.8131 149.908 27.4731 149.908 cv
28.1431 149.908 28.6631 149.748 29.0331 149.428 cv
29.4031 149.108 29.5831 148.648 29.5831 148.068 cv
29.5831 147.808 29.5531 147.558 29.4831 147.298 cv
29.4131 147.038 29.3031 146.788 29.1631 146.528 cv
29.9931 146.528 li
30.1131 146.788 30.2031 147.048 30.2531 147.308 cv
30.3031 147.578 30.3331 147.868 30.3331 148.168 cv
30.3331 148.988 30.0831 149.648 29.5631 150.128 cv
29.0531 150.618 28.3531 150.858 27.4731 150.858 cv
26.5831 150.858 25.8831 150.618 25.3731 150.128 cv
24.8631 149.638 24.6031 148.968 24.6031 148.108 cv
24.6031 147.828 24.6331 147.558 24.6931 147.298 cv
24.7531 147.038 24.8331 146.778 24.9431 146.528 cv
f
24.9431 141.028 mo
25.7831 141.028 li
25.6431 141.288 25.5431 141.538 25.4731 141.798 cv
25.4031 142.058 25.3631 142.308 25.3631 142.568 cv
25.3631 143.148 25.5531 143.608 25.9231 143.928 cv
26.2931 144.248 26.8131 144.408 27.4731 144.408 cv
28.1431 144.408 28.6631 144.248 29.0331 143.928 cv
29.4031 143.608 29.5831 143.148 29.5831 142.568 cv
29.5831 142.308 29.5531 142.058 29.4831 141.798 cv
29.4131 141.538 29.3031 141.288 29.1631 141.028 cv
29.9931 141.028 li
30.1131 141.288 30.2031 141.548 30.2531 141.808 cv
30.3031 142.078 30.3331 142.368 30.3331 142.668 cv
30.3331 143.488 30.0831 144.148 29.5631 144.628 cv
29.0531 145.118 28.3531 145.358 27.4731 145.358 cv
26.5831 145.358 25.8831 145.118 25.3731 144.628 cv
24.8631 144.138 24.6031 143.468 24.6031 142.608 cv
24.6031 142.328 24.6331 142.058 24.6931 141.798 cv
24.7531 141.538 24.8331 141.278 24.9431 141.028 cv
f
28.0431 139.558 mo
24.7331 139.558 li
24.7331 138.658 li
28.0131 138.658 li
28.5331 138.658 28.9131 138.558 29.1731 138.358 cv
29.4331 138.158 29.5631 137.858 29.5631 137.448 cv
29.5631 136.968 29.4131 136.578 29.1031 136.298 cv
28.7931 136.018 28.3731 135.878 27.8331 135.878 cv
24.7331 135.878 li
24.7331 134.978 li
30.2031 134.978 li
30.2031 135.878 li
29.3631 135.878 li
29.7031 136.098 29.9431 136.358 30.1031 136.638 cv
30.2531 136.928 30.3331 137.258 30.3331 137.638 cv
30.3331 138.268 30.1431 138.748 29.7531 139.068 cv
29.3731 139.398 28.8031 139.558 28.0431 139.558 cv
f
25.5731 129.958 mo
25.5131 130.058 25.4731 130.168 25.4431 130.288 cv
25.4231 130.408 25.4031 130.538 25.4031 130.678 cv
25.4031 131.188 25.5731 131.578 25.9031 131.848 cv
26.2331 132.128 26.7031 132.258 27.3231 132.258 cv
30.2031 132.258 li
30.2031 133.158 li
24.7331 133.158 li
24.7331 132.258 li
25.5831 132.258 li
25.2531 132.078 25.0031 131.828 24.8431 131.528 cv
24.6831 131.228 24.6031 130.858 24.6031 130.418 cv
24.6131 130.208 li
24.6231 130.138 24.6331 130.058 24.6531 129.958 cv
25.5731 129.958 li
f
27.4531 126.528 mo
27.4531 127.258 27.5431 127.758 27.7031 128.038 cv
27.8731 128.318 28.1531 128.458 28.5531 128.458 cv
28.8731 128.458 29.1331 128.358 29.3131 128.148 cv
29.5031 127.938 29.5931 127.648 29.5931 127.288 cv
29.5931 126.788 29.4231 126.388 29.0631 126.088 cv
28.7131 125.788 28.2431 125.638 27.6531 125.638 cv
27.4531 125.638 li
27.4531 126.528 li
27.0831 124.738 mo
30.2031 124.738 li
30.2031 125.638 li
29.3731 125.638 li
29.7131 125.848 29.9531 126.108 30.1031 126.408 cv
30.2531 126.708 30.3331 127.088 30.3331 127.528 cv
30.3331 128.088 30.1831 128.538 29.8731 128.868 cv
29.5631 129.198 29.1431 129.358 28.6131 129.358 cv
28.0031 129.358 27.5431 129.158 27.2231 128.738 cv
26.9131 128.328 26.7531 127.718 26.7531 126.898 cv
26.7531 125.638 li
26.6631 125.638 li
26.2531 125.638 25.9331 125.778 25.7031 126.048 cv
25.4831 126.318 25.3631 126.698 25.3631 127.188 cv
25.3631 127.508 25.4031 127.808 25.4831 128.108 cv
25.5631 128.408 25.6731 128.688 25.8131 128.958 cv
24.9831 128.958 li
24.8631 128.638 24.7631 128.318 24.7031 128.008 cv
24.6431 127.698 24.6031 127.398 24.6031 127.098 cv
24.6031 126.308 24.8131 125.718 25.2231 125.328 cv
25.6331 124.938 26.2531 124.738 27.0831 124.738 cv
f
24.9431 118.948 mo
25.7831 118.948 li
25.6431 119.208 25.5431 119.458 25.4731 119.718 cv
25.4031 119.978 25.3631 120.228 25.3631 120.488 cv
25.3631 121.068 25.5531 121.528 25.9231 121.848 cv
26.2931 122.168 26.8131 122.328 27.4731 122.328 cv
28.1431 122.328 28.6631 122.168 29.0331 121.848 cv
29.4031 121.528 29.5831 121.068 29.5831 120.488 cv
29.5831 120.228 29.5531 119.978 29.4831 119.718 cv
29.4131 119.458 29.3031 119.208 29.1631 118.948 cv
29.9931 118.948 li
30.1131 119.208 30.2031 119.468 30.2531 119.728 cv
30.3031 119.998 30.3331 120.288 30.3331 120.588 cv
30.3331 121.408 30.0831 122.068 29.5631 122.548 cv
29.0531 123.038 28.3531 123.278 27.4731 123.278 cv
26.5831 123.278 25.8831 123.038 25.3731 122.548 cv
24.8631 122.058 24.6031 121.388 24.6031 120.528 cv
24.6031 120.248 24.6331 119.978 24.6931 119.718 cv
24.7531 119.458 24.8331 119.198 24.9431 118.948 cv
f
30.7031 115.108 mo
31.3431 115.368 31.7731 115.618 31.9731 115.858 cv
32.1731 116.098 32.2731 116.418 32.2731 116.818 cv
32.2731 117.538 li
31.5231 117.538 li
31.5231 117.008 li
31.5231 116.768 31.4631 116.578 31.3431 116.438 cv
31.2231 116.298 30.9531 116.148 30.5131 115.978 cv
30.1131 115.818 li
24.7331 118.028 li
24.7331 117.078 li
29.0131 115.368 li
24.7331 113.658 li
24.7331 112.708 li
30.7031 115.108 li
f
22.6131 106.128 mo
23.3731 106.568 24.1131 106.888 24.8431 107.098 cv
25.5731 107.318 26.3131 107.418 27.0631 107.418 cv
27.8231 107.418 28.5631 107.318 29.2931 107.098 cv
30.0331 106.888 30.7631 106.568 31.5131 106.128 cv
31.5131 106.908 li
30.7431 107.398 30.0031 107.768 29.2631 108.008 cv
28.5231 108.248 27.7931 108.368 27.0631 108.368 cv
26.3431 108.368 25.6131 108.248 24.8731 108.008 cv
24.1331 107.768 23.3831 107.408 22.6131 106.908 cv
22.6131 106.128 li
f
26.9931 98.0579 mo
26.9931 98.3379 27.1131 98.5679 27.3531 98.7279 cv
27.5931 98.8879 27.9331 98.9679 28.3631 98.9679 cv
28.7831 98.9679 29.1231 98.8879 29.3631 98.7279 cv
29.6031 98.5679 29.7231 98.3379 29.7231 98.0579 cv
29.7231 97.7779 29.6031 97.5579 29.3631 97.3979 cv
29.1231 97.2379 28.7831 97.1579 28.3631 97.1579 cv
27.9431 97.1579 27.6031 97.2379 27.3631 97.3979 cv
27.1231 97.5579 26.9931 97.7779 26.9931 98.0579 cv
26.3731 98.0579 mo
26.3731 97.5479 26.5531 97.1379 26.9131 96.8379 cv
27.2731 96.5379 27.7631 96.3779 28.3631 96.3779 cv
28.9731 96.3779 29.4531 96.5379 29.8031 96.8379 cv
30.1631 97.1379 30.3331 97.5479 30.3331 98.0579 cv
30.3331 98.5779 30.1631 98.9979 29.8031 99.2979 cv
29.4531 99.5979 28.9731 99.7479 28.3631 99.7479 cv
27.7531 99.7479 27.2731 99.5979 26.9131 99.2979 cv
26.5531 98.9979 26.3731 98.5779 26.3731 98.0579 cv
23.4031 103.098 mo
23.4031 103.378 23.5331 103.598 23.7731 103.758 cv
24.0131 103.918 24.3431 103.998 24.7631 103.998 cv
25.2031 103.998 25.5331 103.918 25.7731 103.758 cv
26.0131 103.598 26.1331 103.378 26.1331 103.098 cv
26.1331 102.818 26.0131 102.588 25.7731 102.428 cv
25.5331 102.268 25.2031 102.188 24.7631 102.188 cv
24.3431 102.188 24.0131 102.278 23.7731 102.438 cv
23.5331 102.598 23.4031 102.818 23.4031 103.098 cv
22.7831 98.6879 mo
22.7831 97.9079 li
30.3331 102.468 li
30.3331 103.248 li
22.7831 98.6879 li
22.7831 103.098 mo
22.7831 102.588 22.9631 102.178 23.3231 101.868 cv
23.6831 101.568 24.1631 101.408 24.7631 101.408 cv
25.3831 101.408 25.8631 101.568 26.2231 101.868 cv
26.5831 102.168 26.7531 102.578 26.7531 103.098 cv
26.7531 103.618 26.5831 104.028 26.2231 104.328 cv
25.8631 104.628 25.3831 104.778 24.7631 104.778 cv
24.1631 104.778 23.6831 104.628 23.3231 104.328 cv
22.9631 104.028 22.7831 103.618 22.7831 103.098 cv
f
22.6131 95.028 mo
22.6131 94.248 li
23.3831 93.768 24.1331 93.398 24.8731 93.158 cv
25.6131 92.918 26.3431 92.788 27.0631 92.788 cv
27.7931 92.788 28.5231 92.918 29.2631 93.158 cv
30.0031 93.398 30.7431 93.768 31.5131 94.248 cv
31.5131 95.028 li
30.7631 94.598 30.0331 94.278 29.2931 94.058 cv
28.5631 93.848 27.8231 93.738 27.0631 93.738 cv
26.3131 93.738 25.5731 93.848 24.8431 94.058 cv
24.1131 94.278 23.3731 94.598 22.6131 95.028 cv
f
188.111 19.696 mo
188.363 19.792 188.615 19.972 188.855 20.248 cv
189.095 20.536 189.335 20.92 189.575 21.412 cv
190.775 23.8 li
189.503 23.8 li
188.387 21.556 li
188.099 20.98 187.811 20.584 187.547 20.392 cv
187.271 20.2 186.899 20.104 186.431 20.104 cv
185.147 20.104 li
185.147 23.8 li
183.959 23.8 li
183.959 15.052 li
186.635 15.052 li
187.631 15.052 188.375 15.268 188.867 15.676 cv
189.359 16.096 189.611 16.732 189.611 17.572 cv
189.611 18.124 189.479 18.592 189.227 18.952 cv
188.963 19.312 188.591 19.564 188.111 19.696 cv
185.147 16.024 mo
185.147 19.132 li
186.635 19.132 li
187.199 19.132 187.631 19 187.919 18.736 cv
188.207 18.472 188.363 18.088 188.363 17.572 cv
188.363 17.068 188.207 16.684 187.919 16.42 cv
187.631 16.156 187.199 16.024 186.635 16.024 cv
185.147 16.024 li
f
197.867 20.248 mo
197.867 20.776 li
192.911 20.776 li
192.959 21.52 193.175 22.096 193.583 22.48 cv
193.979 22.864 194.531 23.056 195.251 23.056 cv
195.659 23.056 196.067 23.008 196.451 22.912 cv
196.835 22.816 197.231 22.66 197.615 22.444 cv
197.615 23.464 li
197.231 23.632 196.835 23.764 196.427 23.836 cv
196.019 23.908 195.599 23.956 195.191 23.956 cv
194.135 23.956 193.307 23.656 192.695 23.056 cv
192.083 22.456 191.783 21.628 191.783 20.584 cv
191.783 19.516 192.071 18.664 192.647 18.028 cv
193.223 17.404 194.015 17.08 194.999 17.08 cv
195.887 17.08 196.583 17.368 197.099 17.932 cv
197.603 18.508 197.867 19.276 197.867 20.248 cv
196.787 19.936 mo
196.775 19.348 196.607 18.88 196.295 18.52 cv
195.971 18.172 195.539 17.992 195.011 17.992 cv
194.411 17.992 193.931 18.172 193.571 18.508 cv
193.211 18.844 192.995 19.324 192.947 19.936 cv
196.787 19.936 li
f
202.619 20.5 mo
201.743 20.5 201.143 20.608 200.807 20.8 cv
200.471 21.004 200.303 21.34 200.303 21.82 cv
200.303 22.204 200.423 22.516 200.675 22.732 cv
200.927 22.96 201.275 23.068 201.707 23.068 cv
202.307 23.068 202.787 22.864 203.147 22.432 cv
203.507 22.012 203.687 21.448 203.687 20.74 cv
203.687 20.5 li
202.619 20.5 li
204.767 20.056 mo
204.767 23.8 li
203.687 23.8 li
203.687 22.804 li
203.435 23.212 203.123 23.5 202.763 23.68 cv
202.403 23.86 201.947 23.956 201.419 23.956 cv
200.747 23.956 200.207 23.776 199.811 23.404 cv
199.415 23.032 199.223 22.528 199.223 21.892 cv
199.223 21.16 199.463 20.608 199.967 20.224 cv
200.459 19.852 201.191 19.66 202.175 19.66 cv
203.687 19.66 li
203.687 19.552 li
203.687 19.06 203.519 18.676 203.195 18.4 cv
202.871 18.136 202.415 17.992 201.827 17.992 cv
201.443 17.992 201.083 18.04 200.723 18.136 cv
200.363 18.232 200.027 18.364 199.703 18.532 cv
199.703 17.536 li
200.087 17.392 200.471 17.272 200.843 17.2 cv
201.215 17.128 201.575 17.08 201.935 17.08 cv
202.883 17.08 203.591 17.332 204.059 17.824 cv
204.527 18.316 204.767 19.06 204.767 20.056 cv
f
206.987 14.68 mo
208.067 14.68 li
208.067 23.8 li
206.987 23.8 li
206.987 14.68 li
f
215.375 16.024 mo
215.375 22.828 li
216.803 22.828 li
218.003 22.828 218.891 22.564 219.455 22.012 cv
220.007 21.46 220.295 20.596 220.295 19.42 cv
220.295 18.244 220.007 17.392 219.455 16.84 cv
218.891 16.3 218.003 16.024 216.803 16.024 cv
215.375 16.024 li
214.187 15.052 mo
216.623 15.052 li
218.315 15.052 219.563 15.412 220.355 16.108 cv
221.147 16.816 221.543 17.92 221.543 19.42 cv
221.543 20.932 221.135 22.036 220.343 22.744 cv
219.551 23.452 218.303 23.8 216.623 23.8 cv
214.187 23.8 li
214.187 15.052 li
f
226.367 20.5 mo
225.491 20.5 224.891 20.608 224.555 20.8 cv
224.219 21.004 224.051 21.34 224.051 21.82 cv
224.051 22.204 224.171 22.516 224.423 22.732 cv
224.675 22.96 225.023 23.068 225.455 23.068 cv
226.055 23.068 226.535 22.864 226.895 22.432 cv
227.255 22.012 227.435 21.448 227.435 20.74 cv
227.435 20.5 li
226.367 20.5 li
228.515 20.056 mo
228.515 23.8 li
227.435 23.8 li
227.435 22.804 li
227.183 23.212 226.871 23.5 226.511 23.68 cv
226.151 23.86 225.695 23.956 225.167 23.956 cv
224.495 23.956 223.955 23.776 223.559 23.404 cv
223.163 23.032 222.971 22.528 222.971 21.892 cv
222.971 21.16 223.211 20.608 223.715 20.224 cv
224.207 19.852 224.939 19.66 225.923 19.66 cv
227.435 19.66 li
227.435 19.552 li
227.435 19.06 227.267 18.676 226.943 18.4 cv
226.619 18.136 226.163 17.992 225.575 17.992 cv
225.191 17.992 224.831 18.04 224.471 18.136 cv
224.111 18.232 223.775 18.364 223.451 18.532 cv
223.451 17.536 li
223.835 17.392 224.219 17.272 224.591 17.2 cv
224.963 17.128 225.323 17.08 225.683 17.08 cv
226.631 17.08 227.339 17.332 227.807 17.824 cv
228.275 18.316 228.515 19.06 228.515 20.056 cv
f
231.803 15.376 mo
231.803 17.236 li
234.023 17.236 li
234.023 18.076 li
231.803 18.076 li
231.803 21.64 li
231.803 22.18 231.875 22.528 232.019 22.672 cv
232.163 22.828 232.463 22.9 232.919 22.9 cv
234.023 22.9 li
234.023 23.8 li
232.919 23.8 li
232.079 23.8 231.503 23.644 231.191 23.332 cv
230.879 23.02 230.723 22.456 230.723 21.64 cv
230.723 18.076 li
229.931 18.076 li
229.931 17.236 li
230.723 17.236 li
230.723 15.376 li
231.803 15.376 li
f
238.427 20.5 mo
237.551 20.5 236.951 20.608 236.615 20.8 cv
236.279 21.004 236.111 21.34 236.111 21.82 cv
236.111 22.204 236.231 22.516 236.483 22.732 cv
236.735 22.96 237.083 23.068 237.515 23.068 cv
238.115 23.068 238.595 22.864 238.955 22.432 cv
239.315 22.012 239.495 21.448 239.495 20.74 cv
239.495 20.5 li
238.427 20.5 li
240.575 20.056 mo
240.575 23.8 li
239.495 23.8 li
239.495 22.804 li
239.243 23.212 238.931 23.5 238.571 23.68 cv
238.211 23.86 237.755 23.956 237.227 23.956 cv
236.555 23.956 236.015 23.776 235.619 23.404 cv
235.223 23.032 235.031 22.528 235.031 21.892 cv
235.031 21.16 235.271 20.608 235.775 20.224 cv
236.267 19.852 236.999 19.66 237.983 19.66 cv
239.495 19.66 li
239.495 19.552 li
239.495 19.06 239.327 18.676 239.003 18.4 cv
238.679 18.136 238.223 17.992 237.635 17.992 cv
237.251 17.992 236.891 18.04 236.531 18.136 cv
236.171 18.232 235.835 18.364 235.511 18.532 cv
235.511 17.536 li
235.895 17.392 236.279 17.272 236.651 17.2 cv
237.023 17.128 237.383 17.08 237.743 17.08 cv
238.691 17.08 239.399 17.332 239.867 17.824 cv
240.335 18.316 240.575 19.06 240.575 20.056 cv
f
246.983 17.428 mo
246.983 18.448 li
246.671 18.304 246.359 18.184 246.035 18.1 cv
245.699 18.028 245.363 17.98 245.015 17.98 cv
244.475 17.98 244.067 18.064 243.803 18.232 cv
243.539 18.4 243.407 18.64 243.407 18.964 cv
243.407 19.216 243.503 19.408 243.695 19.552 cv
243.887 19.696 244.271 19.84 244.847 19.96 cv
245.219 20.044 li
245.987 20.212 246.527 20.452 246.851 20.74 cv
247.163 21.04 247.331 21.46 247.331 21.988 cv
247.331 22.6 247.091 23.08 246.611 23.428 cv
246.131 23.788 245.459 23.956 244.619 23.956 cv
244.259 23.956 243.899 23.92 243.515 23.86 cv
243.131 23.8 242.735 23.704 242.315 23.56 cv
242.315 22.444 li
242.711 22.66 243.107 22.816 243.491 22.912 cv
243.875 23.02 244.259 23.068 244.643 23.068 cv
245.147 23.068 245.543 22.984 245.819 22.816 cv
246.083 22.648 246.227 22.396 246.227 22.072 cv
246.227 21.784 246.119 21.556 245.927 21.4 cv
245.735 21.244 245.303 21.088 244.631 20.944 cv
244.259 20.86 li
243.587 20.716 243.095 20.5 242.807 20.212 cv
242.507 19.924 242.363 19.528 242.363 19.012 cv
242.363 18.4 242.579 17.92 243.011 17.584 cv
243.443 17.248 244.067 17.08 244.883 17.08 cv
245.279 17.08 245.651 17.116 246.011 17.176 cv
246.359 17.236 246.683 17.32 246.983 17.428 cv
f
254.663 20.248 mo
254.663 20.776 li
249.707 20.776 li
249.755 21.52 249.971 22.096 250.379 22.48 cv
250.775 22.864 251.327 23.056 252.047 23.056 cv
252.455 23.056 252.863 23.008 253.247 22.912 cv
253.631 22.816 254.027 22.66 254.411 22.444 cv
254.411 23.464 li
254.027 23.632 253.631 23.764 253.223 23.836 cv
252.815 23.908 252.395 23.956 251.987 23.956 cv
250.931 23.956 250.103 23.656 249.491 23.056 cv
248.879 22.456 248.579 21.628 248.579 20.584 cv
248.579 19.516 248.867 18.664 249.443 18.028 cv
250.019 17.404 250.811 17.08 251.795 17.08 cv
252.683 17.08 253.379 17.368 253.895 17.932 cv
254.399 18.508 254.663 19.276 254.663 20.248 cv
253.583 19.936 mo
253.571 19.348 253.403 18.88 253.091 18.52 cv
252.767 18.172 252.335 17.992 251.807 17.992 cv
251.207 17.992 250.727 18.172 250.367 18.508 cv
250.007 18.844 249.791 19.324 249.743 19.936 cv
253.583 19.936 li
f
257.495 15.376 mo
257.495 17.236 li
259.715 17.236 li
259.715 18.076 li
257.495 18.076 li
257.495 21.64 li
257.495 22.18 257.567 22.528 257.711 22.672 cv
257.855 22.828 258.155 22.9 258.611 22.9 cv
259.715 22.9 li
259.715 23.8 li
258.611 23.8 li
257.771 23.8 257.195 23.644 256.883 23.332 cv
256.571 23.02 256.415 22.456 256.415 21.64 cv
256.415 18.076 li
255.623 18.076 li
255.623 17.236 li
256.415 17.236 li
256.415 15.376 li
257.495 15.376 li
f
60 126.525 mo
141.091 126.525 li
141.091 34.8 li
60 34.8 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
60 126.525 mo
141.091 126.525 li
141.091 34.8 li
60 34.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
68.4 44.525 mo
85.2 44.525 li
3.0518e-5 1 1 3.0518e-5 cmyk
@
100.572 47.741 mo
100.572 51.209 li
99.492 51.209 li
99.492 42.161 li
100.572 42.161 li
100.572 43.157 li
100.788 42.773 101.076 42.485 101.424 42.293 cv
101.772 42.101 102.192 42.005 102.672 42.005 cv
103.464 42.005 104.112 42.329 104.616 42.953 cv
105.108 43.589 105.36 44.417 105.36 45.449 cv
105.36 46.481 105.108 47.321 104.616 47.945 cv
104.112 48.569 103.464 48.881 102.672 48.881 cv
102.192 48.881 101.772 48.785 101.424 48.605 cv
101.076 48.425 100.788 48.137 100.572 47.741 cv
104.244 45.449 mo
104.244 44.657 104.076 44.045 103.752 43.589 cv
103.416 43.133 102.972 42.905 102.408 42.905 cv
101.832 42.905 101.388 43.133 101.064 43.589 cv
100.728 44.045 100.572 44.657 100.572 45.449 cv
100.572 46.241 100.728 46.865 101.064 47.321 cv
101.388 47.777 101.832 47.993 102.408 47.993 cv
102.972 47.993 103.416 47.777 103.752 47.321 cv
104.076 46.865 104.244 46.241 104.244 45.449 cv
1 /0 /CSD get_res sepcs
1 sep
f
111.468 43.157 mo
111.468 39.605 li
112.548 39.605 li
112.548 48.725 li
111.468 48.725 li
111.468 47.741 li
111.24 48.137 110.952 48.425 110.604 48.605 cv
110.256 48.785 109.848 48.881 109.368 48.881 cv
108.576 48.881 107.928 48.569 107.424 47.945 cv
106.92 47.321 106.68 46.481 106.68 45.449 cv
106.68 44.417 106.92 43.589 107.424 42.953 cv
107.928 42.329 108.576 42.005 109.368 42.005 cv
109.848 42.005 110.256 42.101 110.604 42.293 cv
110.952 42.485 111.24 42.773 111.468 43.157 cv
107.796 45.449 mo
107.796 46.241 107.952 46.865 108.276 47.321 cv
108.6 47.777 109.056 47.993 109.632 47.993 cv
110.196 47.993 110.64 47.777 110.976 47.321 cv
111.3 46.865 111.468 46.241 111.468 45.449 cv
111.468 44.657 111.3 44.045 110.976 43.589 cv
110.64 43.133 110.196 42.905 109.632 42.905 cv
109.056 42.905 108.6 43.133 108.276 43.589 cv
107.952 44.045 107.796 44.657 107.796 45.449 cv
f
116.004 40.949 mo
116.004 44.237 li
117.492 44.237 li
118.044 44.237 118.464 44.105 118.764 43.817 cv
119.064 43.529 119.22 43.121 119.22 42.593 cv
119.22 42.065 119.064 41.669 118.764 41.381 cv
118.464 41.093 118.044 40.949 117.492 40.949 cv
116.004 40.949 li
114.816 39.977 mo
117.492 39.977 li
118.464 39.977 119.208 40.205 119.712 40.649 cv
120.216 41.093 120.468 41.741 120.468 42.593 cv
120.468 43.457 120.216 44.117 119.712 44.549 cv
119.208 44.993 118.464 45.209 117.492 45.209 cv
116.004 45.209 li
116.004 48.725 li
114.816 48.725 li
114.816 39.977 li
f
125.808 43.169 mo
125.688 43.097 125.556 43.049 125.412 43.013 cv
125.268 42.989 125.112 42.965 124.944 42.965 cv
124.332 42.965 123.864 43.169 123.54 43.565 cv
123.204 43.961 123.048 44.525 123.048 45.269 cv
123.048 48.725 li
121.968 48.725 li
121.968 42.161 li
123.048 42.161 li
123.048 43.181 li
123.264 42.785 123.564 42.485 123.924 42.293 cv
124.284 42.101 124.728 42.005 125.256 42.005 cv
125.328 42.005 125.412 42.017 125.508 42.017 cv
125.592 42.029 125.688 42.041 125.808 42.065 cv
125.808 43.169 li
f
132.552 45.173 mo
132.552 45.701 li
127.596 45.701 li
127.644 46.445 127.86 47.021 128.268 47.405 cv
128.664 47.789 129.216 47.981 129.936 47.981 cv
130.344 47.981 130.752 47.933 131.136 47.837 cv
131.52 47.741 131.916 47.585 132.3 47.369 cv
132.3 48.389 li
131.916 48.557 131.52 48.689 131.112 48.761 cv
130.704 48.833 130.284 48.881 129.876 48.881 cv
128.82 48.881 127.992 48.581 127.38 47.981 cv
126.768 47.381 126.468 46.553 126.468 45.509 cv
126.468 44.441 126.756 43.589 127.332 42.953 cv
127.908 42.329 128.7 42.005 129.684 42.005 cv
130.572 42.005 131.268 42.293 131.784 42.857 cv
132.288 43.433 132.552 44.201 132.552 45.173 cv
131.472 44.861 mo
131.46 44.273 131.292 43.805 130.98 43.445 cv
130.656 43.097 130.224 42.917 129.696 42.917 cv
129.096 42.917 128.616 43.097 128.256 43.433 cv
127.896 43.769 127.68 44.249 127.632 44.861 cv
131.472 44.861 li
f
0 lc
[6 6 ] 0 dsh
68.4 62.15 mo
85.2 62.15 li
.948119 .783108 3.0518e-5 3.0518e-5 cmyk
@
100.764 58.574 mo
100.764 61.862 li
102.252 61.862 li
102.804 61.862 103.224 61.73 103.524 61.442 cv
103.824 61.154 103.98 60.746 103.98 60.218 cv
103.98 59.69 103.824 59.294 103.524 59.006 cv
103.224 58.718 102.804 58.574 102.252 58.574 cv
100.764 58.574 li
99.576 57.602 mo
102.252 57.602 li
103.224 57.602 103.968 57.83 104.472 58.274 cv
104.976 58.718 105.228 59.366 105.228 60.218 cv
105.228 61.082 104.976 61.742 104.472 62.174 cv
103.968 62.618 103.224 62.834 102.252 62.834 cv
100.764 62.834 li
100.764 66.35 li
99.576 66.35 li
99.576 57.602 li
1 /0 /CSD get_res sepcs
1 sep
f
110.568 60.794 mo
110.448 60.722 110.316 60.674 110.172 60.638 cv
110.028 60.614 109.872 60.59 109.704 60.59 cv
109.092 60.59 108.624 60.794 108.3 61.19 cv
107.964 61.586 107.808 62.15 107.808 62.894 cv
107.808 66.35 li
106.728 66.35 li
106.728 59.786 li
107.808 59.786 li
107.808 60.806 li
108.024 60.41 108.324 60.11 108.684 59.918 cv
109.044 59.726 109.488 59.63 110.016 59.63 cv
110.088 59.63 110.172 59.642 110.268 59.642 cv
110.352 59.654 110.448 59.666 110.568 59.69 cv
110.568 60.794 li
f
117.312 62.798 mo
117.312 63.326 li
112.356 63.326 li
112.404 64.07 112.62 64.646 113.028 65.03 cv
113.424 65.414 113.976 65.606 114.696 65.606 cv
115.104 65.606 115.512 65.558 115.896 65.462 cv
116.28 65.366 116.676 65.21 117.06 64.994 cv
117.06 66.014 li
116.676 66.182 116.28 66.314 115.872 66.386 cv
115.464 66.458 115.044 66.506 114.636 66.506 cv
113.58 66.506 112.752 66.206 112.14 65.606 cv
111.528 65.006 111.228 64.178 111.228 63.134 cv
111.228 62.066 111.516 61.214 112.092 60.578 cv
112.668 59.954 113.46 59.63 114.444 59.63 cv
115.332 59.63 116.028 59.918 116.544 60.482 cv
117.048 61.058 117.312 61.826 117.312 62.798 cv
116.232 62.486 mo
116.22 61.898 116.052 61.43 115.74 61.07 cv
115.416 60.722 114.984 60.542 114.456 60.542 cv
113.856 60.542 113.376 60.722 113.016 61.058 cv
112.656 61.394 112.44 61.874 112.392 62.486 cv
116.232 62.486 li
f
[1 3 ] 0 dsh
68.4 79.775 mo
85.2 79.775 li
.38291 .924498 3.0518e-5 3.0518e-5 cmyk
@
65.4 82.775 mo
71.4 76.775 li
65.4 76.775 mo
71.4 82.775 li
f
.5 lw
[] 0 dsh
65.4 82.775 mo
71.4 76.775 li
65.4 76.775 mo
71.4 82.775 li
@
82.2 82.775 mo
88.2 76.775 li
82.2 76.775 mo
88.2 82.775 li
f
82.2 82.775 mo
88.2 76.775 li
82.2 76.775 mo
88.2 82.775 li
@
100.596 75.551 mo
100.596 77.411 li
102.816 77.411 li
102.816 78.251 li
100.596 78.251 li
100.596 81.815 li
100.596 82.355 100.668 82.703 100.812 82.847 cv
100.956 83.003 101.256 83.075 101.712 83.075 cv
102.816 83.075 li
102.816 83.975 li
101.712 83.975 li
100.872 83.975 100.296 83.819 99.984 83.507 cv
99.672 83.195 99.516 82.631 99.516 81.815 cv
99.516 78.251 li
98.724 78.251 li
98.724 77.411 li
99.516 77.411 li
99.516 75.551 li
100.596 75.551 li
1 /0 /CSD get_res sepcs
1 sep
f
107.556 74.855 mo
107.556 75.755 li
106.524 75.755 li
106.14 75.755 105.864 75.839 105.72 75.995 cv
105.564 76.151 105.492 76.427 105.492 76.835 cv
105.492 77.411 li
107.268 77.411 li
107.268 78.251 li
105.492 78.251 li
105.492 83.975 li
104.412 83.975 li
104.412 78.251 li
103.38 78.251 li
103.38 77.411 li
104.412 77.411 li
104.412 76.955 li
104.412 76.235 104.58 75.695 104.916 75.359 cv
105.252 75.023 105.792 74.855 106.536 74.855 cv
107.556 74.855 li
f
109.692 76.199 mo
109.692 79.487 li
111.18 79.487 li
111.732 79.487 112.152 79.355 112.452 79.067 cv
112.752 78.779 112.908 78.371 112.908 77.843 cv
112.908 77.315 112.752 76.919 112.452 76.631 cv
112.152 76.343 111.732 76.199 111.18 76.199 cv
109.692 76.199 li
108.504 75.227 mo
111.18 75.227 li
112.152 75.227 112.896 75.455 113.4 75.899 cv
113.904 76.343 114.156 76.991 114.156 77.843 cv
114.156 78.707 113.904 79.367 113.4 79.799 cv
112.896 80.243 112.152 80.459 111.18 80.459 cv
109.692 80.459 li
109.692 83.975 li
108.504 83.975 li
108.504 75.227 li
f
119.496 78.419 mo
119.376 78.347 119.244 78.299 119.1 78.263 cv
118.956 78.239 118.8 78.215 118.632 78.215 cv
118.02 78.215 117.552 78.419 117.228 78.815 cv
116.892 79.211 116.736 79.775 116.736 80.519 cv
116.736 83.975 li
115.656 83.975 li
115.656 77.411 li
116.736 77.411 li
116.736 78.431 li
116.952 78.035 117.252 77.735 117.612 77.543 cv
117.972 77.351 118.416 77.255 118.944 77.255 cv
119.016 77.255 119.1 77.267 119.196 77.267 cv
119.28 77.279 119.376 77.291 119.496 77.315 cv
119.496 78.419 li
f
126.24 80.423 mo
126.24 80.951 li
121.284 80.951 li
121.332 81.695 121.548 82.271 121.956 82.655 cv
122.352 83.039 122.904 83.231 123.624 83.231 cv
124.032 83.231 124.44 83.183 124.824 83.087 cv
125.208 82.991 125.604 82.835 125.988 82.619 cv
125.988 83.639 li
125.604 83.807 125.208 83.939 124.8 84.011 cv
124.392 84.083 123.972 84.131 123.564 84.131 cv
122.508 84.131 121.68 83.831 121.068 83.231 cv
120.456 82.631 120.156 81.803 120.156 80.759 cv
120.156 79.691 120.444 78.839 121.02 78.203 cv
121.596 77.579 122.388 77.255 123.372 77.255 cv
124.26 77.255 124.956 77.543 125.472 78.107 cv
125.976 78.683 126.24 79.451 126.24 80.423 cv
125.16 80.111 mo
125.148 79.523 124.98 79.055 124.668 78.695 cv
124.344 78.347 123.912 78.167 123.384 78.167 cv
122.784 78.167 122.304 78.347 121.944 78.683 cv
121.584 79.019 121.368 79.499 121.32 80.111 cv
125.16 80.111 li
f
1 lw
2 lc
68.4 97.4 mo
85.2 97.4 li
.94522 .242222 1 .15729 cmyk
@
gsave
65.15 100.65 mo
71.65 100.65 li
71.65 94.15 li
65.15 94.15 li
cp
clp
68.4 100.4 mo
69.1956 100.4 69.9587 100.084 70.5213 99.5213 cv
71.0839 98.9587 71.4 98.1956 71.4 97.4 cv
71.4 96.6044 71.0839 95.8413 70.5213 95.2787 cv
69.9587 94.7161 69.1956 94.4 68.4 94.4 cv
67.6044 94.4 66.8413 94.7161 66.2787 95.2787 cv
65.7161 95.8413 65.4 96.6044 65.4 97.4 cv
65.4 98.1956 65.7161 98.9587 66.2787 99.5213 cv
66.8413 100.084 67.6044 100.4 68.4 100.4 cv
cp
f
.5 lw
0 lc
68.4 100.4 mo
69.1956 100.4 69.9587 100.084 70.5213 99.5213 cv
71.0839 98.9587 71.4 98.1956 71.4 97.4 cv
71.4 96.6044 71.0839 95.8413 70.5213 95.2787 cv
69.9587 94.7161 69.1956 94.4 68.4 94.4 cv
67.6044 94.4 66.8413 94.7161 66.2787 95.2787 cv
65.7161 95.8413 65.4 96.6044 65.4 97.4 cv
65.4 98.1956 65.7161 98.9587 66.2787 99.5213 cv
66.8413 100.084 67.6044 100.4 68.4 100.4 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
81.95 100.65 mo
88.45 100.65 li
88.45 94.15 li
81.95 94.15 li
cp
clp
85.2 100.4 mo
85.9956 100.4 86.7587 100.084 87.3213 99.5213 cv
87.8839 98.9587 88.2 98.1956 88.2 97.4 cv
88.2 96.6044 87.8839 95.8413 87.3213 95.2787 cv
86.7587 94.7161 85.9956 94.4 85.2 94.4 cv
84.4044 94.4 83.6413 94.7161 83.0787 95.2787 cv
82.5161 95.8413 82.2 96.6044 82.2 97.4 cv
82.2 98.1956 82.5161 98.9587 83.0787 99.5213 cv
83.6413 100.084 84.4044 100.4 85.2 100.4 cv
cp
f
.5 lw
0 lc
85.2 100.4 mo
85.9956 100.4 86.7587 100.084 87.3213 99.5213 cv
87.8839 98.9587 88.2 98.1956 88.2 97.4 cv
88.2 96.6044 87.8839 95.8413 87.3213 95.2787 cv
86.7587 94.7161 85.9956 94.4 85.2 94.4 cv
84.4044 94.4 83.6413 94.7161 83.0787 95.2787 cv
82.5161 95.8413 82.2 96.6044 82.2 97.4 cv
82.2 98.1956 82.5161 98.9587 83.0787 99.5213 cv
83.6413 100.084 84.4044 100.4 85.2 100.4 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
100.572 100.616 mo
100.572 104.084 li
99.492 104.084 li
99.492 95.036 li
100.572 95.036 li
100.572 96.032 li
100.788 95.648 101.076 95.36 101.424 95.168 cv
101.772 94.976 102.192 94.88 102.672 94.88 cv
103.464 94.88 104.112 95.204 104.616 95.828 cv
105.108 96.464 105.36 97.292 105.36 98.324 cv
105.36 99.356 105.108 100.196 104.616 100.82 cv
104.112 101.444 103.464 101.756 102.672 101.756 cv
102.192 101.756 101.772 101.66 101.424 101.48 cv
101.076 101.3 100.788 101.012 100.572 100.616 cv
104.244 98.324 mo
104.244 97.532 104.076 96.92 103.752 96.464 cv
103.416 96.008 102.972 95.78 102.408 95.78 cv
101.832 95.78 101.388 96.008 101.064 96.464 cv
100.728 96.92 100.572 97.532 100.572 98.324 cv
100.572 99.116 100.728 99.74 101.064 100.196 cv
101.388 100.652 101.832 100.868 102.408 100.868 cv
102.972 100.868 103.416 100.652 103.752 100.196 cv
104.076 99.74 104.244 99.116 104.244 98.324 cv
1 /0 /CSD get_res sepcs
1 sep
f
111.348 97.496 mo
111.6 97.592 111.852 97.772 112.092 98.048 cv
112.332 98.336 112.572 98.72 112.812 99.212 cv
114.012 101.6 li
112.74 101.6 li
111.624 99.356 li
111.336 98.78 111.048 98.384 110.784 98.192 cv
110.508 98 110.136 97.904 109.668 97.904 cv
108.384 97.904 li
108.384 101.6 li
107.196 101.6 li
107.196 92.852 li
109.872 92.852 li
110.868 92.852 111.612 93.068 112.104 93.476 cv
112.596 93.896 112.848 94.532 112.848 95.372 cv
112.848 95.924 112.716 96.392 112.464 96.752 cv
112.2 97.112 111.828 97.364 111.348 97.496 cv
108.384 93.824 mo
108.384 96.932 li
109.872 96.932 li
110.436 96.932 110.868 96.8 111.156 96.536 cv
111.444 96.272 111.6 95.888 111.6 95.372 cv
111.6 94.868 111.444 94.484 111.156 94.22 cv
110.868 93.956 110.436 93.824 109.872 93.824 cv
108.384 93.824 li
f
118.476 98.3 mo
117.6 98.3 117 98.408 116.664 98.6 cv
116.328 98.804 116.16 99.14 116.16 99.62 cv
116.16 100.004 116.28 100.316 116.532 100.532 cv
116.784 100.76 117.132 100.868 117.564 100.868 cv
118.164 100.868 118.644 100.664 119.004 100.232 cv
119.364 99.812 119.544 99.248 119.544 98.54 cv
119.544 98.3 li
118.476 98.3 li
120.624 97.856 mo
120.624 101.6 li
119.544 101.6 li
119.544 100.604 li
119.292 101.012 118.98 101.3 118.62 101.48 cv
118.26 101.66 117.804 101.756 117.276 101.756 cv
116.604 101.756 116.064 101.576 115.668 101.204 cv
115.272 100.832 115.08 100.328 115.08 99.692 cv
115.08 98.96 115.32 98.408 115.824 98.024 cv
116.316 97.652 117.048 97.46 118.032 97.46 cv
119.544 97.46 li
119.544 97.352 li
119.544 96.86 119.376 96.476 119.052 96.2 cv
118.728 95.936 118.272 95.792 117.684 95.792 cv
117.3 95.792 116.94 95.84 116.58 95.936 cv
116.22 96.032 115.884 96.164 115.56 96.332 cv
115.56 95.336 li
115.944 95.192 116.328 95.072 116.7 95 cv
117.072 94.928 117.432 94.88 117.792 94.88 cv
118.74 94.88 119.448 95.132 119.916 95.624 cv
120.384 96.116 120.624 96.86 120.624 97.856 cv
f
128.304 97.64 mo
128.304 101.6 li
127.224 101.6 li
127.224 97.676 li
127.224 97.052 127.092 96.596 126.852 96.284 cv
126.612 95.972 126.252 95.816 125.772 95.816 cv
125.184 95.816 124.728 96.008 124.392 96.38 cv
124.056 96.752 123.888 97.256 123.888 97.892 cv
123.888 101.6 li
122.808 101.6 li
122.808 95.036 li
123.888 95.036 li
123.888 96.056 li
124.14 95.672 124.44 95.372 124.8 95.18 cv
125.148 94.988 125.556 94.88 126.012 94.88 cv
126.756 94.88 127.332 95.12 127.716 95.588 cv
128.1 96.056 128.304 96.74 128.304 97.64 cv
f
130.416 92.48 mo
131.496 92.48 li
131.496 97.868 li
134.712 95.036 li
136.092 95.036 li
132.612 98.108 li
136.236 101.6 li
134.832 101.6 li
131.496 98.396 li
131.496 101.6 li
130.416 101.6 li
130.416 92.48 li
f
0 lc
[3 5 1 5 ] 0 dsh
68.4 115.025 mo
85.2 115.025 li
@
68.4 115.025 mo
68.4 112.025 li
68.4 115.025 mo
66 116.525 li
68.4 115.025 mo
70.8 116.525 li
f
.5 lw
[] 0 dsh
68.4 115.025 mo
68.4 112.025 li
68.4 115.025 mo
66 116.525 li
68.4 115.025 mo
70.8 116.525 li
@
85.2 115.025 mo
85.2 112.025 li
85.2 115.025 mo
82.8 116.525 li
85.2 115.025 mo
87.6 116.525 li
f
85.2 115.025 mo
85.2 112.025 li
85.2 115.025 mo
82.8 116.525 li
85.2 115.025 mo
87.6 116.525 li
@
104.988 115.265 mo
104.988 119.225 li
103.908 119.225 li
103.908 115.301 li
103.908 114.677 103.776 114.221 103.536 113.909 cv
103.296 113.597 102.936 113.441 102.456 113.441 cv
101.868 113.441 101.412 113.633 101.076 114.005 cv
100.74 114.377 100.572 114.881 100.572 115.517 cv
100.572 119.225 li
99.492 119.225 li
99.492 110.105 li
100.572 110.105 li
100.572 113.681 li
100.824 113.297 101.124 112.997 101.484 112.805 cv
101.832 112.613 102.24 112.505 102.696 112.505 cv
103.44 112.505 104.016 112.745 104.4 113.213 cv
104.784 113.681 104.988 114.365 104.988 115.265 cv
f
111.336 115.121 mo
111.588 115.217 111.84 115.397 112.08 115.673 cv
112.32 115.961 112.56 116.345 112.8 116.837 cv
114 119.225 li
112.728 119.225 li
111.612 116.981 li
111.324 116.405 111.036 116.009 110.772 115.817 cv
110.496 115.625 110.124 115.529 109.656 115.529 cv
108.372 115.529 li
108.372 119.225 li
107.184 119.225 li
107.184 110.477 li
109.86 110.477 li
110.856 110.477 111.6 110.693 112.092 111.101 cv
112.584 111.521 112.836 112.157 112.836 112.997 cv
112.836 113.549 112.704 114.017 112.452 114.377 cv
112.188 114.737 111.816 114.989 111.336 115.121 cv
108.372 111.449 mo
108.372 114.557 li
109.86 114.557 li
110.424 114.557 110.856 114.425 111.144 114.161 cv
111.432 113.897 111.588 113.513 111.588 112.997 cv
111.588 112.493 111.432 112.109 111.144 111.845 cv
110.856 111.581 110.424 111.449 109.86 111.449 cv
108.372 111.449 li
f
118.464 115.925 mo
117.588 115.925 116.988 116.033 116.652 116.225 cv
116.316 116.429 116.148 116.765 116.148 117.245 cv
116.148 117.629 116.268 117.941 116.52 118.157 cv
116.772 118.385 117.12 118.493 117.552 118.493 cv
118.152 118.493 118.632 118.289 118.992 117.857 cv
119.352 117.437 119.532 116.873 119.532 116.165 cv
119.532 115.925 li
118.464 115.925 li
120.612 115.481 mo
120.612 119.225 li
119.532 119.225 li
119.532 118.229 li
119.28 118.637 118.968 118.925 118.608 119.105 cv
118.248 119.285 117.792 119.381 117.264 119.381 cv
116.592 119.381 116.052 119.201 115.656 118.829 cv
115.26 118.457 115.068 117.953 115.068 117.317 cv
115.068 116.585 115.308 116.033 115.812 115.649 cv
116.304 115.277 117.036 115.085 118.02 115.085 cv
119.532 115.085 li
119.532 114.977 li
119.532 114.485 119.364 114.101 119.04 113.825 cv
118.716 113.561 118.26 113.417 117.672 113.417 cv
117.288 113.417 116.928 113.465 116.568 113.561 cv
116.208 113.657 115.872 113.789 115.548 113.957 cv
115.548 112.961 li
115.932 112.817 116.316 112.697 116.688 112.625 cv
117.06 112.553 117.42 112.505 117.78 112.505 cv
118.728 112.505 119.436 112.757 119.904 113.249 cv
120.372 113.741 120.612 114.485 120.612 115.481 cv
f
128.292 115.265 mo
128.292 119.225 li
127.212 119.225 li
127.212 115.301 li
127.212 114.677 127.08 114.221 126.84 113.909 cv
126.6 113.597 126.24 113.441 125.76 113.441 cv
125.172 113.441 124.716 113.633 124.38 114.005 cv
124.044 114.377 123.876 114.881 123.876 115.517 cv
123.876 119.225 li
122.796 119.225 li
122.796 112.661 li
123.876 112.661 li
123.876 113.681 li
124.128 113.297 124.428 112.997 124.788 112.805 cv
125.136 112.613 125.544 112.505 126 112.505 cv
126.744 112.505 127.32 112.745 127.704 113.213 cv
128.088 113.681 128.292 114.365 128.292 115.265 cv
f
130.404 110.105 mo
131.484 110.105 li
131.484 115.493 li
134.7 112.661 li
136.08 112.661 li
132.6 115.733 li
136.224 119.225 li
134.82 119.225 li
131.484 116.021 li
131.484 119.225 li
130.404 119.225 li
130.404 110.105 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
